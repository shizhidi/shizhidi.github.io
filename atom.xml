<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[shizhidi's blog]]></title>
  <subtitle><![CDATA[just do it!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="//"/>
  <updated>2016-06-27T15:03:29.417Z</updated>
  <id>//</id>
  
  <author>
    <name><![CDATA[Edison]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[javascript数据结构：集合]]></title>
    <link href="/2016/06/27/dataStructureOfGather/"/>
    <id>/2016/06/27/dataStructureOfGather/</id>
    <published>2016-06-27T14:38:54.000Z</published>
    <updated>2016-06-27T15:03:29.417Z</updated>
    <content type="html"><![CDATA[<h5 id="集合">集合</h5><p> 集合由一组无序且唯一的项组成。在ES6规范中已实现set类：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">文档</a></p>
<p>下例实现的set类以ES6中set类的实现为基础ES5.1完成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">            items[value] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.delete = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">            <span class="keyword">delete</span> items[value];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">        <span class="comment">//return value in items;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Modern browsers function</span><br><span class="line">     * IE9+, FF4+, Chrome5+, Opera12+, Safari5+</span><br><span class="line">     * @returns &#123;Number&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * cross browser compatibility - legacy browsers</span><br><span class="line">     * for modern browsers use size function</span><br><span class="line">     * @returns &#123;number&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.sizeLegacy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(items.hasOwnProperty(key))</span><br><span class="line">                ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Modern browsers function</span><br><span class="line">     * IE9+, FF4+, Chrome5+, Opera12+, Safari5+</span><br><span class="line">     * @returns &#123;Array&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> values = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>, keys=<span class="built_in">Object</span>.keys(items); i&lt;keys.length; i++) &#123;</span><br><span class="line">            values.push(items[keys[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.valuesLegacy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> values = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(items.hasOwnProperty(key)) &#123;</span><br><span class="line">                values.push(items[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getItems = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> items;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//并集操作</span></span><br><span class="line">    <span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//创建新的集合,代表两个集合的并集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values(); <span class="comment">//获取第一个集合的所有值,添加到unionSet集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        values = otherSet.values(); <span class="comment">//第二个集合同上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unionSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//交集操作</span></span><br><span class="line">    <span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//创建新的集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//遍历第一个集合所有值,循环查看其它集合中是否有相同值。</span></span><br><span class="line">            <span class="keyword">if</span> (otherSet.has(values[i]))&#123;</span><br><span class="line">                intersectionSet.add(values[i]); <span class="comment">//添加到新集合中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intersectionSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//差集操作</span></span><br><span class="line">    <span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//遍历第一个集合所有值,循环查看其它集合中是否没有该值。</span></span><br><span class="line">            <span class="keyword">if</span> (!otherSet.has(values[i]))&#123;   </span><br><span class="line">                differenceSet.add(values[i]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> differenceSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子集操作</span></span><br><span class="line">    <span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size())&#123; <span class="comment">//验证当前的集合如果大于otherSet集合就不是一个子集。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//循环遍历集合</span></span><br><span class="line">                <span class="keyword">if</span> (!otherSet.has(values[i]))&#123; <span class="comment">//如果其它集合中没有当前集合的值,就返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [1]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>));   <span class="comment">//outputs true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size());   <span class="comment">//outputs 1</span></span><br><span class="line"></span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">2</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size());   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(set.sizeLegacy());   <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [2]</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//集合的一些操作</span></span><br><span class="line"><span class="comment">//--------- Union ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line">setB.add(<span class="number">5</span>);</span><br><span class="line">setB.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unionAB = setA.union(setB);</span><br><span class="line"><span class="built_in">console</span>.log(unionAB.values());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Intersection ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> intersectionAB = setA.intersection(setB);</span><br><span class="line"><span class="built_in">console</span>.log(intersectionAB.values());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Difference ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> differenceAB = setA.difference(setB);</span><br><span class="line"><span class="built_in">console</span>.log(differenceAB.values());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Subset ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">1</span>);</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setC = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setC.add(<span class="number">2</span>);</span><br><span class="line">setC.add(<span class="number">3</span>);</span><br><span class="line">setC.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setB));</span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setC));</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构集合。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：链表]]></title>
    <link href="/2016/06/25/dataStructureOfList/"/>
    <id>/2016/06/25/dataStructureOfList/</id>
    <published>2016-06-25T03:42:06.000Z</published>
    <updated>2016-06-25T07:12:59.339Z</updated>
    <content type="html"><![CDATA[<h5 id="链表">链表</h5><p> 链表的例子例如寻宝游戏,有一条线索,线索指向寻找下一条线索地点的指针。顺着这条链接下去,得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法,就是从起点顺着列表找。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//node表示要加入列表的项</span></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>; <span class="comment">//next 为指向下一个节点的指针</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向列表尾部添加一个新的项</span></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//如果head元素为null,新添加的就为第一个节点</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            current = head;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环,直到找到最后一项列表</span></span><br><span class="line">            <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到最后一项,将其next赋为node,建立链接</span></span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//更新列表的长度</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//向列表的特定位置插入一个新的项</span></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一个位置添加</span></span><br><span class="line"></span><br><span class="line">                node.next = current;</span><br><span class="line">                head = node;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123;</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //更新列表长度</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    //从列表的特定位置移除一项</span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //检查越界值</span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //移除第一项</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125; <span class="attribute">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //将<span class="attribute">previous</span>与<span class="attribute">current</span>的下一项链接起来：跳过<span class="attribute">current</span>,从而移除它</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //从列表中移除一项</span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    //返回元素在列表中的索引,没有该元素返回<span class="attribute">-1</span></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span> (<span class="attribute">current</span>) &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">==</span> <span class="attribute">current.element</span>) &#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    //返回第一个节点</span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    //由于列表使用了<span class="attribute">node</span>类,重写继承自<span class="attribute">javascript</span>对象默认的<span class="attribute">toString</span>方法,让其只输出元素的值。</span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">string</span> = '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span> (<span class="attribute">current</span>) &#123;</span><br><span class="line">            <span class="attribute">string</span> += <span class="attribute">current.element</span> + (<span class="attribute">current.next</span> ? ', ' <span class="attribute">:</span> '');</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">string</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>双向链表</strong><br> 双向链表和普通链表的区别在于：<br> 普通链表：一个节点只有链向下一个节点的链接。<br> 双向链表的链接是双向的：一个链向下一个元素,另一个链向前一个元素。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> tail = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//first node on list</span></span><br><span class="line">            head = node;</span><br><span class="line">            tail = node; <span class="comment">//NEW</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//attach to the tail node //NEW</span></span><br><span class="line">            tail.next = node;</span><br><span class="line">            node.prev = tail;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//update size of list</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一位置添加</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!head)&#123;       <span class="comment">//如果列表为空</span></span><br><span class="line">                    head = node;</span><br><span class="line">                    tail = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//第一个元素不为空,就插到第一个元素前面</span></span><br><span class="line">                    node.next = current;</span><br><span class="line">                    current.prev = node;</span><br><span class="line">                    head = node;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (position === length) &#123; <span class="comment">//最后一项</span></span><br><span class="line"></span><br><span class="line">                current = tail;     <span class="comment">// </span></span><br><span class="line">                current.next = node;</span><br><span class="line">                node.prev = current;</span><br><span class="line">                tail = node;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123; //</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">current.prev</span> = <span class="attribute">node</span>; //</span><br><span class="line">                <span class="attribute">node.prev</span> = <span class="attribute">previous</span>; //</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //<span class="attribute">update</span> <span class="attribute">size</span> <span class="attribute">of</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //检查越界值</span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //移除第一项</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">current.next</span>; //</span><br><span class="line"></span><br><span class="line">                //如果只有一项,更新<span class="attribute">tail</span></span><br><span class="line">                <span class="attribute">if</span> (<span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">1</span>)&#123; //</span><br><span class="line">                    <span class="attribute">tail</span> = <span class="attribute">null</span>;</span><br><span class="line">                &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">                    <span class="attribute">head.prev</span> = <span class="attribute">null</span>; //</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">length-1</span>)&#123; //最后一项</span><br><span class="line"></span><br><span class="line">                <span class="attribute">current</span> = <span class="attribute">tail</span>; //</span><br><span class="line">                <span class="attribute">tail</span> = <span class="attribute">current.prev</span>;</span><br><span class="line">                <span class="attribute">tail.next</span> = <span class="attribute">null</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> &#123; //从中间移除元素</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //将<span class="attribute">previous</span>与<span class="attribute">current</span>的下一项链接起来<span class="attribute">--</span>跳过<span class="attribute">current</span></span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>; // &#123;<span class="attribute">6</span>&#125;</span><br><span class="line">                <span class="attribute">current.next.prev</span> = <span class="attribute">previous</span>; //<span class="attribute">NEW</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">-1</span>;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">index</span>++;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">in</span> <span class="attribute">the</span> <span class="attribute">middle</span> <span class="attribute">of</span> <span class="attribute">the</span> <span class="attribute">list</span></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">last</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.</span> <span class="attribute">size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current</span> ? <span class="attribute">current.element</span> <span class="attribute">:</span> '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current</span> &amp;&amp; <span class="attribute">current.next</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.inverseToString</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">tail</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current</span> ? <span class="attribute">current.element</span> <span class="attribute">:</span> '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current</span> &amp;&amp; <span class="attribute">current.prev</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.prev</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.printInverse</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.inverseToString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getTail</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">tail</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p> <strong>循环链表</strong><br> 循环链表的区别在于,最后一个元素指向下一个元素的指针,不是null,而是指向第一个元素head。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CircularLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//first node on list</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            current = head;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//loop the list until find last item</span></span><br><span class="line">            <span class="keyword">while</span>(current.next !== head)&#123; <span class="comment">//last element will be head instead of NULL</span></span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//get last item and assign next to added item to make the link</span></span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set node.next to head - to have circular list</span></span><br><span class="line">        node.next = head;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//update size of list</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check for out-of-bounds values</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//add on first position</span></span><br><span class="line"></span><br><span class="line">                node.next = current;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//update last element</span></span><br><span class="line">                <span class="keyword">while</span>(current.next !== head)&#123; <span class="comment">//last element will be head instead of NULL</span></span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                head = node;</span><br><span class="line">                current.next = head;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123;</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //<span class="attribute">update</span> <span class="attribute">size</span> <span class="attribute">of</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">for</span> <span class="attribute">out-of-bounds</span> <span class="attribute">values</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //<span class="attribute">removing</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123; //<span class="attribute">needs</span> <span class="attribute">to</span> <span class="attribute">update</span> <span class="attribute">last</span> <span class="attribute">element</span> <span class="attribute">first</span></span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">head.next</span>;</span><br><span class="line">                <span class="attribute">current.next</span> = <span class="attribute">head</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> &#123; //<span class="attribute">no</span> <span class="attribute">need</span> <span class="attribute">to</span> <span class="attribute">update</span> <span class="attribute">last</span> <span class="attribute">element</span> <span class="attribute">for</span> <span class="attribute">circular</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //<span class="attribute">link</span> <span class="attribute">previous</span> <span class="attribute">with</span> <span class="attribute">current</span>'<span class="attribute">s</span> <span class="attribute">next</span> <span class="attribute">-</span> <span class="attribute">skip</span> <span class="attribute">it</span> <span class="attribute">to</span> <span class="attribute">remove</span></span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">-1</span>;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">index</span>++;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">in</span> <span class="attribute">the</span> <span class="attribute">middle</span> <span class="attribute">of</span> <span class="attribute">the</span> <span class="attribute">list</span></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">last</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s.toString</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构链表。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：队列]]></title>
    <link href="/2016/06/24/dataStructureOfQueue/"/>
    <id>/2016/06/24/dataStructureOfQueue/</id>
    <published>2016-06-24T15:00:22.000Z</published>
    <updated>2016-06-25T03:30:28.764Z</updated>
    <content type="html"><![CDATA[<h5 id="队列">队列</h5><p> 队列遵循FIFO(先进先出,先来先服务)。例如：排队做些事情。</p>
<p>创建一个队列类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">//向尾部添加一个新的项。</span></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        items.push(element);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//移除队列的第一项,并返回被移除的元素。</span></span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回队列中的第一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//如果队列为空,返回true,否则false</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = [];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//outputs true</span></span><br><span class="line">queue.enqueue(<span class="string">"John"</span>);</span><br><span class="line">queue.enqueue(<span class="string">"Jack"</span>);</span><br><span class="line">queue.print();</span><br><span class="line">queue.enqueue(<span class="string">"Camila"</span>);</span><br><span class="line">queue.print();</span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//outputs 3</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//outputs false</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.print();</span><br></pre></td></tr></table></figure></p>
<p><strong>优先队列</strong><br>举个例子：就是机场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优先级为1,2,3,4,5。数值越大优先级越低</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">//参数包含要添加的元素,及其在队列中的优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span> (<span class="params">element, priority</span>)</span>&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (queueElement.priority &lt; items[i].priority)&#123; <span class="comment">// 找到比要添加的元素的priority值更大项时(优先级更低)</span></span><br><span class="line">                items.splice(i,<span class="number">0</span>,queueElement);             <span class="comment">// 把新元素插入比较元素之前</span></span><br><span class="line">                added = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 终止队列循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!added)&#123;</span><br><span class="line">            items.push(queueElement); <span class="comment">//如果队列为空,或要添加元素的priority值大于任何已有的元素,添加到末尾。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span>  - <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Maxwell"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</span><br><span class="line">priorityQueue.print();</span><br></pre></td></tr></table></figure>
<p><strong>循环队列</strong><br>循环队列的例子击鼓传花游戏:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span> (<span class="params">nameList, num</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要用到一开始队列类</span></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把里面的名字全都加入队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nameList.length; i++)&#123;</span><br><span class="line">        queue.enqueue(nameList[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> eliminated = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">            queue.enqueue(queue.dequeue()); <span class="comment">//num为循环的次数,循环将第一个元素删除并添加至末尾,模拟击鼓传花</span></span><br><span class="line">        &#125;</span><br><span class="line">        eliminated = queue.dequeue(); <span class="comment">//从队列中移除,提示删除一个元素</span></span><br><span class="line">        <span class="built_in">console</span>.log(eliminated + <span class="string">' was eliminated from the Hot Potato game.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue.dequeue(); <span class="comment">//最终胜利者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'John'</span>,<span class="string">'Jack'</span>,<span class="string">'Camila'</span>,<span class="string">'Ingrid'</span>,<span class="string">'Carl'</span>];</span><br><span class="line"><span class="keyword">let</span> winner = hotPotato(names, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The winner is: '</span> + winner);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构队列。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：栈]]></title>
    <link href="/2016/06/24/dataStructureOfStack/"/>
    <id>/2016/06/24/dataStructureOfStack/</id>
    <published>2016-06-23T23:50:34.000Z</published>
    <updated>2016-06-24T14:55:16.562Z</updated>
    <content type="html"><![CDATA[<h5 id="栈">栈</h5><p> 栈是一种遵从 <strong>后进先出</strong> (LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾,称作栈顶,另一端就叫栈底。在栈里,新元素都靠近栈顶,旧元素都接近栈底。<br>类似于生活中堆好的盘子,先从最上面的开始用。</p>
<p>下面将创建一个栈的类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加新元素到栈顶</span></span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    items.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈顶的元素,同时返回被移除的元素</span></span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈顶的元素,不对栈做任何修改</span></span><br><span class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈里的所有元素</span></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈里的元素个数</span></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//清空栈</span></span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印栈到控制台</span></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>利用Stack类,实现十进制转换二进制例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),rem,binaryString = <span class="string">''</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % <span class="number">2</span>);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += remStack.pop().String();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">233</span>)); <span class="comment">// 11101001</span></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">10</span>)); <span class="comment">// 1010</span></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">1000</span>)); <span class="comment">// 1111101000</span></span><br></pre></td></tr></table></figure></p>
<p>十进制转换任何进制例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber,base</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),rem,binaryString = <span class="string">''</span>,digits = <span class="string">'0123456789ABCDEF'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">2</span>)); <span class="comment">// 11000011111111001</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">8</span>)); <span class="comment">// 303771</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">16</span>)); <span class="comment">// 187F9</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构栈。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据存取(二)]]></title>
    <link href="/2016/06/22/DataAccess/"/>
    <id>/2016/06/22/DataAccess/</id>
    <published>2016-06-22T14:44:32.000Z</published>
    <updated>2016-06-23T14:25:53.052Z</updated>
    <content type="html"><![CDATA[<h5 id="JavaScript中的数据存储位置">JavaScript中的数据存储位置</h5><p>数据存储在数组和对象中,访问速度慢于字面量和局部变量。跟浏览器也有很大关系。</p>
<p><strong>标示符解析的性能</strong><br> 在执行环境中,标示符所在的位置越深,它的读写速度也就最慢。因此,函数中读写局部变量比全局变量总是快。全局变量总是存在于执行环境作用域链的最末端。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bd = <span class="built_in">document</span>.body,</span><br><span class="line">  links = <span class="built_in">document</span>.getElementsByTagNamme(<span class="string">"a"</span>),</span><br><span class="line">  i = <span class="number">0</span>,</span><br><span class="line">  len = links.length;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">    update(links[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"go-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bd.className = <span class="string">"active"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>document是全局对象,每次都有遍历整个作用域链。<br>优化后代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>,</span><br><span class="line">  bd = doc.body,</span><br><span class="line">  links = doc.getElementsByTagNamme(<span class="string">"a"</span>),</span><br><span class="line">  i = <span class="number">0</span>,</span><br><span class="line">  len = links.length;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">    update(links[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  doc.getElementById(<span class="string">"go-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bd.className = <span class="string">"active"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>错误处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  methodThatMightCauseAnError();</span><br><span class="line">&#125;cache(ex)&#123;</span><br><span class="line">  handleError(ex);<span class="comment">//委托给错误处理器函数,由于只执行一条语句,没有局部变量的访问。</span></span><br><span class="line">                  <span class="comment">//作用域链的临时改变不会影响代码性能。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>避免使用动态作用域,包括with、try-cache和eval。</p>
<p><strong>闭包、作用域和内存</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignEvents</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = <span class="string">"xdi9592"</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"save-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    saveDocument(id);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>assignEvents函数执行时,会创建一个包含id的活动对象,成为作用域链中的第一个对象,全局对象紧随其后。<br>因为id引用了外部作用域的变量,闭包[scope]属性包含了与assignEvents函数执行作用域链相同的对象引用。<br>通常来说,活动对象会随着执行环境一同销毁,但是由于引用一直存在,所以活动对象无法销毁。会导致性能问题。<br><code>尤其在IE浏览器中需要关注,闭包会导致内存泄露。</code></p>
<p><strong>原型</strong><br>在浏览器中这个属性是<strong>proto</strong>对象,对象有两种成员类型:实例成员和原型成员。实例成员直接存在于对象实例中,原型成员则从对象原型继承而来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  title:<span class="string">"high"</span>,</span><br><span class="line">  publisher:<span class="string">"yahoo!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(book.toString()); <span class="comment">//"[object object]"</span></span><br></pre></td></tr></table></figure>
<p>对象boot并没有toString方法,却顺利执行了,方法toString()是由对象book继承而来的原型成员。<br>可以使用hasOwnProperty()方法来判断对象是否包含特定的实例成员,是否包含特定属性,使用in操作符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(book.hasOwnProperty(<span class="string">"title"</span>)); <span class="comment">//true</span></span><br><span class="line">alert(book.hasOwnProperty(<span class="string">"toString"</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">alert(<span class="string">"title"</span> <span class="keyword">in</span> book); <span class="comment">//true</span></span><br><span class="line">alert(<span class="string">"toString"</span> <span class="keyword">in</span> book); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><strong>原型链</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">title,publisher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line">  <span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book.prototype.sayTitle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book1 = <span class="keyword">new</span> Book(<span class="string">"High Per Java"</span>,<span class="string">"Yahoo! Press"</span>);</span><br><span class="line"><span class="keyword">var</span> book2 = <span class="keyword">new</span> Book(<span class="string">"javaScript: The Good Parts"</span>,<span class="string">"Yahoo! Press"</span>);</span><br><span class="line"></span><br><span class="line">alert(book1 <span class="keyword">instanceof</span> Book); <span class="comment">//true</span></span><br><span class="line">alert(book1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">book1.sayTitle(); <span class="comment">//"High Per Java"</span></span><br><span class="line">alert(book1.toString()); <span class="comment">//"[object object]"</span></span><br></pre></td></tr></table></figure></p>
<p>使用Book构造函数创建新的Book实例。book1的原型(<strong>proto</strong>)是Book.prototype,而Book.prototype的原型是Object。book1和book2继承原型链中的所有成员,它们有着各自的title和publisher属性,其他部分都继承自原型。<br>对象在原型链中存在的位置越深,找到它就越慢。</p>
<p><strong>嵌套成员</strong>会导致JavaScript引擎搜索所有对象成员。例：window.location.href。嵌套越深读取时间越长。<br>location.href总是比window.location.href要快,后者比window.location.href.toString()要快。</p>
<p><strong>缓存对象成员值</strong><br>在函数中如果要多次读取一个对象属性,最佳做法是将属性值保存到局部变量中。局部变量能用来替代属性以避免多次查找带来的性能开销,特别是处理嵌套对象成员,这样做会明显提升执行速度。</p>
<p><strong>提示</strong>：这种优化并不推荐用于对象的成员方法。因为对象方法使用this来判断执行环境,把一个对象方法保存在局部变量会导致this绑定到window,<br>而this值的改变会使得JavaScript引擎无法正确解析它的对象成员,进而导致程序出错。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript的数据存取优化。]]>
    
    </summary>
    
      <category term="性能优化" scheme="/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2DCanvas：底层2D图像渲染(六)]]></title>
    <link href="/2016/06/22/2DCanvas/"/>
    <id>/2016/06/22/2DCanvas/</id>
    <published>2016-06-21T23:22:36.000Z</published>
    <updated>2016-06-22T00:00:52.167Z</updated>
    <content type="html"><![CDATA[<h5 id="基础知识">基础知识</h5><p> HTML5的Canvas API终结了Flash独霸的地位,Canvas能在一个DOM元素中创建2D形状,无需任何插件的支持。Canvas可实现真正的跨平台应用,并且结合各种框架(PhoneGap)进行开发。</p>
<p>Canvas更擅长构建复杂动画及交互效果。如果想实现简单的可视化或动画,可以用SVG技术来实现,利用SVG,可以创建Logo图标、图表以及信息图,另外它还有很多Canvas所缺乏的内建功能,比如动画、可缩放性,以及支持CSS。</p>
<p>本文利用canvas创建一个打砖块游戏,来更好的理解canvas并能利用这些知识来开发自己的Canvas应用。</p>
<hr>
<p>canvas的坐标系与平常的笛卡尔坐标系有一点差别,该坐标系的原点位于左上角,y轴方向向下。</p>
<p>生成Cancas绘图环境:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">id</span>=<span class="value">"canvas"</span> <span class="attribute">width</span>=<span class="value">"408"</span> <span class="attribute">height</span>=<span class="value">"250"</span>&gt;</span></span><br><span class="line">  你的浏览器不支持canvas。 //不支持canvas的浏览器会显示内容。</span><br><span class="line"><span class="tag">&lt;/<span class="title">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById('canvas');</span><br><span class="line">var context = canvas.getContext('2d'); //获取2d绘图环境</span><br></pre></td></tr></table></figure></p>
<p>验证浏览器是否支持canvas:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext &amp;&amp; canvas.getContext(<span class="string">'2d'</span>))&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="打砖块游戏">打砖块游戏</h5><p><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch6/index.html" target="_blank" rel="external">打开游戏</a></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-canvas的相关应用。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动应用：客户端存储与离线执行(五)]]></title>
    <link href="/2016/06/18/clientStoredAndOffline/"/>
    <id>/2016/06/18/clientStoredAndOffline/</id>
    <published>2016-06-18T03:32:37.000Z</published>
    <updated>2016-06-21T15:15:22.437Z</updated>
    <content type="html"><![CDATA[<h5 id="主要内容">主要内容</h5><ul>
<li>利用Web Storage API,将数据存储在客户端</li>
<li>管理一个完整的位于客户端上的IndexedDB数据库</li>
<li>利用Application Cache API来实现应用离线执行</li>
</ul>
<h5 id="移动应用My_Tasks">移动应用My Tasks</h5><p> 通过这个应用,你将主要学会以下几个关键技能:</p>
<ul>
<li>利用WebStorage API将数据存储在客户端</li>
<li>利用IndexedDB数据库将数据储存在客户端</li>
<li>利用应用缓存清单文件构建能够支持离线使用的Web应用</li>
</ul>
<p><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch5/index.html" target="_blank" rel="external">打开应用</a></p>
<p>注意将应用运行在服务器上,否则,它将无法在移动设备上运行,其离线功能也无法使用。</p>
<p>Python服务器模块,node服务器,php都行。</p>
<p>关于Web Sql:在IndexedDB之前,HTML5有个WebSql的客户端数据库规范,一种定义在浏览器中的关系数据库。现已不再是HTML5规范了,<br>但是许多浏览器厂商已经支持它,特别是移动端浏览器。例:sqllite</p>
<h5 id="应用缓存清单">应用缓存清单</h5><p> 使用应用缓存清单文件需要用到真实的Web服务器。一共需要3个步骤：</p>
<ul>
<li>配置Web服务器。</li>
<li>创建应用缓存清单文件</li>
<li>侦测清单文件中的变化</li>
</ul>
<p>apache服务器,可以在httpd.conf配置文件中添加<code>addType text/cache-manifest .appcache</code>。<br>nginx服务器,在nginx conf目录下,为mime.types文件添加一行代码,<code>text/cache-manifest appcache</code>。</p>
<p>缓存清单文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST&#10;# Rev 3&#10;&#10;CACHE:&#10;index.html&#10;pics/logo.png&#10;stylesheet.css&#10;&#10;FALLBACK:&#10;*.html     /offline.html&#10;&#10;NETWORK:&#10;http://api.stockwebsite.com</span><br></pre></td></tr></table></figure></p>
<p>CACHE段是项目默认的分段,其中的URI在随后首次下载时将被缓存。 <code>也可以不知道CACHE标题,直接把URI放在标题CACHE MANIFEST下面</code><br>FALLBACK段是可选的,指定了在某资源处于离线时,转而使用的其他URI。结对中的第一个URI是在线资源,第二个是本地的回退资源。可以使用通配符<em><br><code>两种URL都必须有相对路径名称,这里的URI域缓存清单文件中其他部分中的URL,都必须有和清单文件一样的方案、主机和端口</code><br>NETWORK部分是在线访问的白名单。所有列在此标题头下的URI都必须绕过缓存访问在线资源。可以使用通配符</em></p>
<p>修改html元素：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">class</span>=<span class="value">"blue"</span> <span class="attribute">manifest</span>=<span class="value">"tasks.appcache"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以更改.appcache文件中更新修订号,测试应用是否能够加载新版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-客户的存储方式有哪些,以及离线执行应用。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[形状(三)]]></title>
    <link href="/2016/06/12/shape/"/>
    <id>/2016/06/12/shape/</id>
    <published>2016-06-12T03:19:10.000Z</published>
    <updated>2016-06-12T03:19:36.179Z</updated>
    <content type="html"></content>
    <summary type="html">
    <![CDATA[本文主要介绍了各种背景和边框的样式。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[背景与边框(二)]]></title>
    <link href="/2016/06/11/backgroundAndBorder/"/>
    <id>/2016/06/11/backgroundAndBorder/</id>
    <published>2016-06-11T13:28:38.000Z</published>
    <updated>2016-06-13T16:04:41.407Z</updated>
    <content type="html"><![CDATA[<h5 id="半透明边框"><a href="http://play.csssecrets.io/translucent-borders" target="_blank" rel="external">半透明边框</a></h5><p> 大家对半透明颜色的使用基本上还是集中在背景上,原因：</p>
<ul>
<li>与#ff0066和orange一样：把它们当作图片,只在背景中使用。</li>
<li>针对背景提供的回退方案比其他属性容易多,半透明背景色的回退方案,使用一张单像素的透明图片来。其他属性,只能回退到实色。</li>
<li>其他属性使用半透明颜色不那么容易。</li>
</ul>
<p>给一个容器设置一层白色背景和一道半透明白色边框,但是背景色会从它的半透明边框透上来,最初尝试:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>解决方案：background-clip 浏览器会用内边距的外沿来把背景裁切掉。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-clip</span>:<span class="value"> padding-box</span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="多重边框"><a href="http://play.csssecrets.io/multiple-borders" target="_blank" rel="external">多重边框</a></h5><ol>
<li>box-shadow方案<br>多数人用过box-shadow来生成投影,但还有第4个参数(“扩张半径”),指定正值或负值,<code>让投影面积加大或减小</code>：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="hexcolor">#655</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>它支持逗号分隔语法,我们可以创建任意数量的投影。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="hexcolor">#655</span>,<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>注意事项：</p>
<ul>
<li>投影跟边框不一样,它不会影响布局,不会受到box-sizing属性的影响。</li>
<li>不会响应鼠标事件,比如悬停或点击。</li>
</ul>
<ol>
<li>outline方案<br>如果只需两层边框,可以设置一层常规边框border,再加上outline(描边),优点在于边框样式十分灵活,(box-shadow不能产生虚线边框效果)。<br>上例box-shadow效果可以用下例代码实现：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">outline</span>:<span class="value"> <span class="number">5px</span> solid deeppink</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以通过outline-offset属性来控制跟元素边缘的间距,接受负值。</p>
<p>注意事项：</p>
<ul>
<li>只适用于双层“边框”的场景。</li>
<li>不一定会贴合border-radius属性产生的圆角,如果元素是圆角,描边可能是直角。</li>
<li>根据规范“描边可以不是矩形”,但如果使用这个方法,<code>最好在不同浏览器中完整地测试最终效果</code>。</li>
</ul>
<h5 id="灵活的背景定位"><a href="http://play.csssecrets.io/extended-bg-position" target="_blank" rel="external">灵活的背景定位</a></h5><p>当容器尺寸固定,可以通过background-position来定位。但要是容器尺寸不固定,CSS2.1就没办法了,借助现代的CSS特性,有更好的解决方案。</p>
<ol>
<li><a href="http://play.csssecrets.io/background-origin" target="_blank" rel="external">background-origin方案</a><br>background-position：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(code-pirate.svg) no-repeat <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> right <span class="number">10px</span> bottom <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>默认情况下,background-position是以padding box为准的,这样边框才不会遮住背景图片。因此,top left默认是padding box的左上角开始的。</p>
<p>css3中有个新属性background-origin,默认情况下,它的值是padding-box,可以指定为context-box,以内容区域作为基准,此时背景图片的偏移量就跟内边距一致了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(<span class="string">"code-pirate.svg"</span>) no-repeat <span class="hexcolor">#58a</span></span><br><span class="line">            bottom right</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-origin</span>:<span class="value"> content-box</span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/background-position-calc" target="_blank" rel="external">calc函数方案</a><br>直接在background-position属性中使用：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(<span class="string">"code-pirate.svg"</span>) no-repeat</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> <span class="function">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="function">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：<br>不要忘记在calc()函数内的- 和 + 两侧各加一个空白符,否则会解析出错!</p>
<h5 id="边框内圆角"><a href="http://play.csssecrets.io/inner-rounding" target="_blank" rel="external">边框内圆角</a></h5><p>现在用两个元素就可以实现这个效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.something-meaningful</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.something-meaningful</span> &gt; <span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> tan</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以用一个元素实现,有点hack,不推荐<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> tan</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">6em</span> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">outline</span>:<span class="value"> .<span class="number">6em</span> solid <span class="hexcolor">#655</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="条纹背景"><a href="http://play.csssecrets.io/horizontal-stripes" target="_blank" rel="external">条纹背景</a></h5><p>利用渐变创建条纹背景:拉近两个色标,渐变区域就会变窄,50%两个色标重合。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">50%</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>改变背景尺寸,默认重复平铺。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">50%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>避免每次改动条纹宽度都要修改两个数字,把第二个色标位置设置为0,那它的位置就总是前一个色标的位置值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>创建超过两种颜色的条纹。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">33.3%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>, <span class="hexcolor">#58a</span> <span class="number">66.6%</span>, yellowgreen <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">45px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p><a href="http://play.csssecrets.io/vertical-stripes" target="_blank" rel="external">垂直条纹</a><br>只需要在开头加上一个额外的参数来指定渐变方向</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(to right,<span class="comment">/*或 90deg*/</span> <span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://play.csssecrets.io/diagonal-stripes" target="_blank" rel="external">斜向条纹</a><br>代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span> <span class="number">25%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>,<span class="hexcolor">#58a</span> <span class="number">50%</span>, <span class="hexcolor">#fb3</span> <span class="number">0</span>, <span class="hexcolor">#fb3</span> <span class="number">75%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>发现宽度实际变小了,是因为条纹的宽度实际上是三角形的高。通过公式勾股定理, 2*15根号2 约等于42.426406817<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span> <span class="number">25%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>,<span class="hexcolor">#58a</span> <span class="number">50%</span>, <span class="hexcolor">#fb3</span> <span class="number">0</span>, <span class="hexcolor">#fb3</span> <span class="number">75%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/diagonal-stripes-60deg" target="_blank" rel="external">更好的斜向条纹</a><br>利用repeating-linear-gradient 和 repeating-radial-gradient 色标无线循环重复。<br>重复渐变：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span>, <span class="hexcolor">#58a</span> <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>创建上例条纹样式：在渐变的色标中指定长度,而不是原来的background-size,可以指定任意角度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span>,<span class="hexcolor">#fb3</span> <span class="number">15px</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>, <span class="hexcolor">#58a</span> <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/subtle-stripes" target="_blank" rel="external">灵活的同色系条纹</a><br>把最深的颜色指定为背景色,同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">30deg</span>, </span><br><span class="line">              <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>), <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>) <span class="number">15px</span>,</span><br><span class="line">              transparent <span class="number">0</span>, transparent <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vh</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="复杂的背景图案">复杂的背景图案</h5><p>用CSS渐变来创建人和种类的几何图案</p>
<ol>
<li><a href="http://play.csssecrets.io/blueprint" target="_blank" rel="external">网格</a><br>把多个渐变图案组合起来<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">90deg</span>,<span class="function">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="function">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>希望网格中每个格子的大小可以调整,而网格线条的粗细同时保持固定。使用长度而不是百分比作为色标的场景:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(white <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">1px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30s</span>px</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://lea.verou.me/css3patterns/" target="_blank" rel="external">CSS3图案库</a></p>
<p>可以把不同线宽,不同颜色的网格图案叠加起来,得到一个逼真的蓝图网格：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">50px</span> <span class="number">50px</span>, <span class="number">50px</span> <span class="number">50px</span>,</span><br><span class="line">                 <span class="number">10px</span> <span class="number">10px</span>, <span class="number">10px</span> <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/polka" target="_blank" rel="external">波点</a></li>
</ol>
<p>径向渐变创建圆点的阵列：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>波点图案：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>棋盘<br>用两个直角三角形来拼合出方块。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>把色标的位置从50%改为25%,再把色标顺序反转,就可以创建相反方向的三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="hexcolor">#bbb</span> <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="hexcolor">#bbb</span> <span class="number">0</span>)</span></span>; 色标翻转</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span></span></span>; 第二层渐变在水平和垂直方向均移动贴片长度的一半</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>未来在CSS第四版中,可以生成角向渐变,创建棋盘很简单：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"><span class="function">repeating-conic-gradient</span>(<span class="hexcolor">#bbb</span> <span class="number">0</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, <span class="hexcolor">#eee</span> <span class="number">0</span>, <span class="hexcolor">#eee</span> <span class="number">50%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>也可用SVG来生成<a href="http://play.csssecrets.io/checkerboard-svg" target="_blank" rel="external">棋盘</a>,可以把SVG文件以data URI方式内嵌到样式表中：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span> <span class="function">url</span>(<span class="string">'data:image/svg+xml,\</span><br><span class="line">  &lt;svg xmlns="http://www.w3.org/2000/svg" \</span><br><span class="line">    width="100" height="100" \</span><br><span class="line">    fill-opacity=".25"&gt;\</span><br><span class="line">    &lt;rect x="50" width="50" height="50"&gt; \</span><br><span class="line">    &lt;rect y="50" width="50" height="50"&gt; \</span><br><span class="line">    &lt;/svg&gt;'</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="伪随机背景"><a href="http://play.csssecrets.io/cicada-stripes" target="_blank" rel="external">伪随机背景</a></h5><p> 自然界中的事物都不是以无限平铺的方式存在的。</p>
<p>解决方案：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> </span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#fb3</span> <span class="number">11px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#ab4</span> <span class="number">20px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#655</span> <span class="number">20px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">80px</span> <span class="number">100%</span>, <span class="number">60px</span> <span class="number">100%</span>, <span class="number">40px</span> <span class="number">100%</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>看起来更随机性,<code>各层背景图像以不同间距重复数次后再次统一对齐</code>,<code>这里贴片的尺寸实际上就是所有background-size的最小公倍数</code>,40、60、80的最小公倍数是240<br>让这种随机性更加真实,<code>把贴片的尺寸最大化</code>,<code>为了让最小公倍数最大化,这些数字最好是“相对质数”</code>。选择质数,质数跟其他任意数字都是相对质数。我们的代码改为：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> </span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#fb3</span> <span class="number">11px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#ab4</span> <span class="number">23px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#655</span> <span class="number">41px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">41px</span> <span class="number">100%</span>, <span class="number">61px</span> <span class="number">100%</span>, <span class="number">83px</span> <span class="number">100%</span></span></span>;</span><br></pre></td></tr></table></figure>
<p><a href="http://play.csssecrets.io/cicanimation" target="_blank" rel="external">伪随机动画</a></p>
<h5 id="连续的图像边框">连续的图像边框</h5><p> 把图案或图片应用为边框,而不是背景。<br>border-image<a href="http://play.csssecrets.io/border-image" target="_blank" rel="external">工作原理</a></p>
<p>最简单的办法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="something-meaningful"&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    I have a nice stone art border,don't I look pretty?</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.something-meaningful &#123;</span><br><span class="line">  background: url(stone-art.jpg);</span><br><span class="line">  backfround-size: cover;</span><br><span class="line">  padding: 1em;</span><br><span class="line">&#125;</span><br><span class="line">.something-meaningful &gt; div &#123;</span><br><span class="line">  background: white;</span><br><span class="line">  padding: 1em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下例用<a href="http://play.csssecrets.io/continuous-image-borders" target="_blank" rel="external">一个元素实现</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">padding: 1em;</span><br><span class="line">border: 1em solid transparent;</span><br><span class="line">background: linear-gradient(white,white),url(stone-art.jpg); //在石雕背景图片上,叠加一层纯白的实色背景</span><br><span class="line">background-size: cover;</span><br><span class="line">background-clip: padding-box, border-box; 给两层背景指定不同的background-clip值</span><br><span class="line">background-origin: border-box; //默认为padding box 设置以平铺的方式蔓延到border box区域</span><br></pre></td></tr></table></figure></p>
<p>渐变图案生成<a href="http://play.csssecrets.io/vintage-envelope" target="_blank" rel="external">老式信封样式的边框</a></p>
<p>类ps中的选区<a href="http://play.csssecrets.io/marching=ants" target="_blank" rel="external">蚂蚁行军边框</a></p>
<p>border-image创建<a href="http://play.csssecrets.io/footnote" target="_blank" rel="external">脚注效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要介绍了各种背景和边框的样式。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web标准：是敌还是友(一)]]></title>
    <link href="/2016/06/07/cssCodingSkills/"/>
    <id>/2016/06/07/cssCodingSkills/</id>
    <published>2016-06-07T13:10:47.000Z</published>
    <updated>2016-06-11T13:32:31.158Z</updated>
    <content type="html"><![CDATA[<h4 id="Web标准：是敌还是友">Web标准：是敌还是友</h4><h6 id="标准的制定过程">标准的制定过程</h6><p> W3C并不“生成”标准,这些技术规范(基本上)并不是由W3C的工作人员编写完成的。</p>
<p>css规范由css工作组成员编写。人员组成：</p>
<ul>
<li>86名来自W3C会员公司的成员</li>
<li>7名特邀专家</li>
<li>5名W3C工作人员</li>
</ul>
<p>他们每年的会费也是W3C主要资金来源,使得W3C能够免费、开放。对于哪些东西该进入标准,浏览器厂商比W3C有更多的发言权。</p>
<p>制定标准并不是闭门造车,工作组每周召开一次电话会议,每季度面对面会议,会议记录透明。</p>
<p>每项规范从最初启动到最终成熟,都会经过以下阶段。</p>
<ol>
<li>编辑草案(ED)</li>
<li>首个公开工作草案(FPWD)</li>
<li>工作草案(WD)</li>
<li>候选推荐规范(CR)</li>
<li>提名推荐规范(PR)</li>
<li>正式推荐规范(REC)</li>
</ol>
<h6 id="CSS3、CSS4以及其他传说">CSS3、CSS4以及其他传说</h6><p> 一项规范如果要推进到最终阶段,其中的每项特性必须具备两个独立的实现和全面的测试。因CSS2变得非常庞大,将CSS打散到多个不同的规范(模块)中，<br>尽管“CSS3”这个名词非常流行,但它实际上并没有在任何规范中定义过。</p>
<h6 id="浏览器前缀">浏览器前缀</h6><p> 当新的规范出来,工作组需要网页开发者在生产环境中使用规范,以确保各项规范处理真实的开发需求。开发者都不愿尝试,所以每个浏览器厂商要加上自己的特有前缀,开发者可以自由尝试。<br>新的问题,代码冗余,有的厂商没有出现该属性的前缀。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>-ms-border-radius 和 -o-border-radius 没有出现在任何浏览器中。</p>
<p>自动化的一些工具：</p>
<ul>
<li>初期的一些网站工具,<a href="http://css3please.com" target="_blank" rel="external">CSS3,Please!</a>等,把无前缀的代码粘贴进去，会自动把其他前缀都加好。很快就过气了。</li>
<li><a href="https://github.com/ai/autoprefixer" target="_blank" rel="external">Autoprefixer</a> 采用<a href="http://caniuse.com" target="_blank" rel="external">Can I Use</a>的数据库来判断哪些前缀是需求添加的。</li>
<li>-prefix-free 会在浏览器中进行特性检测,来决定哪些前缀是需要添加的。</li>
<li>类似 Stylue、LESS、Sass 的常用属性加前缀的mixin。</li>
</ul>
<p><code>浏览器前缀已是一场史诗般的失败</code></p>
<h4 id="CSS编码技巧">CSS编码技巧</h4><h6 id="尽量减少代码重复">尽量减少代码重复</h6><p> <code>尽量减少改动时要编辑的地方</code><br>例子：这是一个按钮<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">6px</span> <span class="number">16px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#446d88</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span> <span class="function">linear-gradient</span>(<span class="hexcolor">#77a0bb</span>,<span class="hexcolor">#58a</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> gray</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">text-shadow</span>:<span class="value"> <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="hexcolor">#335166</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>上例代码是糟糕的,当字体改动时,行高也要更改 <code>当某些值相互依赖时,应该把它们的相互关系用代码表达出来</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">3em</span> .<span class="number">8em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span> <span class="function">linear-gradient</span>(<span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">2</span>),transparent)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">2em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> .<span class="number">05em</span> .<span class="number">25em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">text-shadow</span>:<span class="value"> <span class="number">0</span> -.<span class="number">05em</span> .<span class="number">05em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">125%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5</span></span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>代码易维护 vs 代码量少<br><code>代码易维护和代码量少不可兼得</code><br>例子：加一道10px边框, 但左侧不加边框。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>日后改动边框要改3个地方,拆成两条声明,可读性会好一些。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-left-width</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>currentColor<br>currentColor是 color 属性的值，具体意思是指：currentColor关键字的使用值是 color 属性值的计算值。<code>CSS中有史以来的第一个变量</code>,<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述代码div 会有一个红色的边框,比如 border-color、outline-color、以及text-shadow和box-shadow属性的默认颜色值是color属性的值。</p>
<ol>
<li>继承<br>inherit可以用在任何CSS属性中,而且它总是绑定到父元素的计算值(对伪元素来说,则会取生成该伪元素的宿主元素)。<br>例：把表单元素的字体设计为与页面的其他部分相同或要把超链接的颜色设定为与页面中其他文本相同。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span>,<span class="tag">select</span>,<span class="tag">button</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font</span>:<span class="value"> inherit</span></span>; &#125;</span>  </span><br><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> inherit</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="相信你的眼睛,而不是数字">相信你的眼睛,而不是数字</h6><p> 举个例子,同等宽高的正方形和圆形。视觉上的感知会认为圆形更小一些。还有给文本容器设置内边距,视觉上左右/上下内边距是不等的,原因在于,<code>字母的形状在两端都比较整齐,而顶部和底部则往往参差不齐。</code>这就需要减少顶部和底部的内边距。</p>
<h6 id="响应式网页设计">响应式网页设计</h6><p> 常见的是用多分辨率来测试一个网站,添加多个媒体查询(Media Query)规则来解决,但是对于以后的CSS改动来说,<code>每个媒体查询都会增加成本</code>。每次的CSS代码修改都要查看媒体查询是否需要修改和设置。<br>不是说媒体查询是一种不良实践,<code>只要用对了,它就是利器</code>。在何时使用：</p>
<ul>
<li>比如你想把网站做得弹性灵活,其他尝试都失败了。</li>
<li><p>或在较大或较小的视口下完全改变网站的设计形态(譬如,把侧栏改成水平布局)。</p>
<p>避免不必要的媒体查询,建议:</p>
</li>
<li>使用百分比取代固定长度,尝试使用与视口相关的单位(vw、vh、vmin和vmax),它们的值解析为视口宽度或高度的百分比。</li>
<li>当你需要在较大分辨率下得到固定宽度时,使用max-width而不是width,因为它可以适应较小的分辨率,而无需使用媒体查询。</li>
<li>为替换元素(img、object、video、iframe等)设置一个max-width,值为100%。</li>
<li>把背景图片完整铺满一个容器,可以使用background-size: cover 属性做到,由于带宽限制,在移动网页中把大图缩小显示不太明智。</li>
<li>当图片(或其他元素)以列式进行布局时,让视口的宽度来决定列的数量。弹性盒模型(flexbox)或者display:inline-block加上常规的文本折行,都可实现这一点。</li>
<li>使用多列文本时,指定column-width(列宽)而不是指定column-count(列数),这样它就可以在较小的屏幕上自动显示为单列布局。</li>
</ul>
<p>总的思路来说,<code>尽最大努力实现弹性可伸缩的布局,并在媒体查询的各个断点区间内指定相应尺寸</code>。当网页设计足够灵活,响应式只需用到简短的媒体查询代码。</p>
<h6 id="合理使用简写">合理使用简写</h6><p> 下两行代码并不是等价的：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> rebeccapurple</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> rebeccapurple</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>前者为纯色背景,后者背景最终会显示一个粉色渐变图案、一张图片或其他任何东西,因为可能会有一条background-image声明在起作用。<br><code>合理使用简写是一种良好的防卫性编码方式,可以抵御未来的风险</code>。如果要明确地去覆盖某个具体的展开式属性,就需要我们用展开式属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(tr.png) no-repeat top right / <span class="number">2em</span> <span class="number">2em</span>,</span><br><span class="line">background: <span class="function">url</span>(br.png) no-repeat bottom right / <span class="number">2em</span> <span class="number">2em</span>,</span><br><span class="line">background: <span class="function">url</span>(bl.png) no-repeat bottom left / <span class="number">2em</span> <span class="number">2em</span></span></span></span><br></pre></td></tr></table></figure>
<p>把重复的值从简写属性中抽出来写成一个展开式属性:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(tr.png) top right,</span><br><span class="line">background: <span class="function">url</span>(br.png) bottom right,</span><br><span class="line">background: <span class="function">url</span>(bl.png) bottom left</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">2em</span> <span class="number">2em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-repeat</span>:<span class="value"> no-repeat</span></span>;</span><br></pre></td></tr></table></figure></p>
<h6 id="应该使用预处理器吗">应该使用预处理器吗</h6><p> <code>如果使用得当,它们在大型项目中可以让代码更加灵活</code><br>预处理器的缺点：</p>
<ul>
<li>文件体积和复杂度可能会失控。</li>
<li>调试难度会增加,现在很多工具支持SourceMap,正是为了解决这个痛点而生的。</li>
<li>延时,需要差不多1秒的时间来把源代码编译成CSS。</li>
<li>当新成员加入时,<code>要么强制协作者接受我们的选择,要么花费额外的时间来培训</code>。</li>
<li><code>预处理器也有自己的BUG</code>,我们会很少怀疑预处理的某个BUG。</li>
</ul>
<p><code>很多受预处理器启发的特性都已经以各种方式融入到原生CSS中了</code>。</p>
<ul>
<li>一份关于自定义的属性草案,<code>CSS自定义属性层叠式变量</code>(<a href="http://w3.org/TR/css-variables-1" target="_blank" rel="external">http://w3.org/TR/css-variables-1</a>).</li>
<li>CSS中的calc()函数。</li>
<li>CSS颜色(第四版)的 color()函数。</li>
<li>还有CSS工作组正式讨论的嵌套。</li>
</ul>
<p>原生特性通常<code>比预处理器提供的版本要强大的多</code>,预处理器不知道如何处理100%-50px,原生可以。<code>在使用预处理器的问题上需要冷静决策</code>,不应该在每个项目一开始时就使用预处理器。</p>
<p><a href="http://myth.io" target="_blank" rel="external">Myth</a>是一款实验性质的预处理器,它模拟原生的CSS新特性,而不是引入私有语法。本质上扮演了CSSpolyfill的角色。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要介绍了css相关web标准和编写技巧。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WebGl：3D应用开发 (九)]]></title>
    <link href="/2016/06/01/webGlDevelopment/"/>
    <id>/2016/06/01/webGlDevelopment/</id>
    <published>2016-06-01T14:07:42.000Z</published>
    <updated>2016-06-02T13:05:45.209Z</updated>
    <content type="html"><![CDATA[<h4 id="主要内容">主要内容</h4><ul>
<li>开发WebGl引擎</li>
<li>与显卡通讯</li>
<li>创建3D图形</li>
</ul>
<p>快速开发出来一个WebGl应用,下载CopperLicht,<a href="http://www.ambiera.com/copperlicht/download.html" target="_blank" rel="external">下载页面</a>。<br>其他一些项目(交互式数据展示、建筑展示、动画视频和地图等),可以使用 <code>Threejs</code> </p>
<p>本文要创建的3D <a href="https://shizhidi.github.io/assets/examples/html5-ia/ch9/geometry_destroyer/index.html" target="_blank" rel="external">Geometry Destroyer</a>游戏应用。</p>
<h5 id="创建一个WebGl游戏引擎">创建一个WebGl游戏引擎</h5><p>在旧版IE中使用WebGL,使用<a href="http://iewebgl.com" target="_blank" rel="external">IEWebGL插件</a>。IE6到10,都支持。注意它并不适合本文范例,和Three.js库能很好的结合。</p>
<p>关于显卡的警告：并不是所用显卡都能支持WebGL,如果用的浏览器时Chrome或Firefox的最新版,却无法运行本文应用。可以换台电脑试一下。</p>
<p>不能在WebGL应用中使用2D Canvas,二者不能出现在同一绘图环境中。不过,可以使用两个&lt;canvas&gt;元素来创建两个不同的绘图环境,然后通过css,让其中一个位于另一个上方。</p>
<p>assets目录中的4个外部文件：</p>
<ul>
<li>Paul Irish 位于animation.js 中的 requestAnimationFrame()。</li>
<li>John Resig的类扩展脚本classes.js的一种轻微修改版本。</li>
<li>变换矩阵库sylvester.js。</li>
<li>webgl_util.js的辅助函数。</li>
</ul>
<p>利用最好的动画实践来配置引擎：</p>
<ul>
<li>利用requestAnimationFrame()取代setInterval,来解决移动兼容性,防止在另一个标签页中更新,防止帧速率波动。</li>
<li>在其他浏览器中测试requestAnimationFrame(),利用Paul Irish 提供的polyfill,为像IE8这样的老式浏览器提供支持。</li>
</ul>
<p>engine目录中的文件：</p>
<ul>
<li>core.js这些代码能够判断浏览器是否支持WebGL,对WebGL进行基本配置,创建一个侦测碰撞的辅助方法,并且为后面的代码预先留出位置。</li>
<li>game.js含有几个常用方法,可缩减run.js文件尺寸,并使其易于维护。</li>
</ul>
<h4 id="与显卡通信">与显卡通信</h4><p> 有关显卡的一些基本知识：用户浏览器时如何处理并显示游戏对象的3D数据：<br>当把实体的3D数据发送到显卡时,这些数据起初是以数组形式(计算机数据)存在的,随后就会被GPU(图形处理单元)转换成顶点缓冲区。在这一渲染阶段,<br>需要更多的信息来装配3D形状(比如说缓冲区变量)。在处理完定点缓冲区后,这些数据就会通过顶点着色器的处理,生成屏幕位置和颜色信息。然后,GPU通过<br>三角形转配器将3D数据进一步处理成三角形片段,然后再将其送入光栅化程序,清楚掉形状当中不必要的视觉数据,生成像素片段,平滑彩色表面。随后,片段着色器<br>会继续处理形状数据,为每一像素输出色彩值及深度值。最后,通过缓存器将3D数据显示到用户屏幕上。</p>
<p>三角面很容易拼合成人脸或者球体这种复杂的三维形体。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解 webGl的 3D应用开发]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript性能优化：加载和执行(一)]]></title>
    <link href="/2016/05/31/LoadAndExecute/"/>
    <id>/2016/05/31/LoadAndExecute/</id>
    <published>2016-05-31T12:39:35.000Z</published>
    <updated>2016-05-31T15:53:38.993Z</updated>
    <content type="html"><![CDATA[<h4 id="叙述">叙述</h4><p> javascript在浏览器中不能同时做其他任何事情,所以同一时刻,只能做一件事。JavaScript执行过程耗时越久,浏览器等待响应的事件就越长。<br>&lt;script&gt;标签每次的出现会让页面等待脚本的解析和执行。因为脚本的执行过程中可能会修改页面内容。例子:在页面中使用document.write()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">title</span>&gt;</span>Script Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="openscad"></span><br><span class="line">          document.write<span class="params">(<span class="string">"The date is "</span>+<span class="params">(new Date<span class="params">()</span>)</span>.toDateString<span class="params">()</span>)</span>;</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>浏览器遇到&lt;script&gt;标签时，会停止处理页面,先执行javaScript代码,然后再继续解析和渲染页面。</p>
<h4 id="脚本位置">脚本位置</h4><p> 正确的脚本放置位置,不会阻塞页面的渲染,dom加载完后下载执行脚本。现代浏览器允许并行下载javascript文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">title</span>&gt;</span>Script Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"styles.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="title">--</span> <span class="attribute">Example</span> <span class="attribute">of</span> <span class="attribute">recommended</span> <span class="attribute">script</span> <span class="attribute">positioning</span> <span class="attribute">--</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"file1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"file2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"file3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="组织脚本">组织脚本</h4><p> 把多个脚本合并为一个javascript文件加载,可以减少性能消耗,可以通过打包工具。</p>
<h4 id="无阻塞的脚本">无阻塞的脚本</h4><p> 可以利用window.load事件触发后再下载脚本。</p>
<h4 id="延迟的脚本">延迟的脚本</h4><p> HTML5规范中引入了async属性,用于异步加载脚本。async与defer的相同点是采用并行下载,在下载过程中不会产生阻塞。区别在于执行时机,async是加载完成后自动执行,而defer需要等待页面完成后执行。(defer属性执行的脚本不会修改DOM)。<br>例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"file1.js"</span> defer&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>任何带有defer属性的&lt;script&gt;元素在DOM完成加载之前都不会被执行。多个带defer属性的文件下载时,不会阻塞浏览器的其他进程,可以与页面中的其他资源并行下载。<br>例子：展示defer属性如何影响脚本行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">title</span>&gt;</span>Script Defer Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="lisp"></span><br><span class="line">     alert<span class="list">(<span class="string">"defer"</span>)</span><span class="comment">;</span></span><br><span class="line">   </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="lisp"></span><br><span class="line">     alert<span class="list">(<span class="string">"script"</span>)</span><span class="comment">;</span></span><br><span class="line">   </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">     <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       alert(<span class="string">"load"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>不支持defer属性的浏览器的弹出顺序是“defer”、“script”、“load”。而在支持defer属性的浏览器上,弹出的顺序是:“script”、“defer”、“load”。带有defer属性的元素不是跟在第二个后面执行,而是在onload事件处理器执行之前被调用。<br>HTML规范定义：defer属性仅当src属性声明时才生效。</p>
<h4 id="动态脚本元素">动态脚本元素</h4><p> 标准的DOM方法创建一个新的&lt;script&gt;元素:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"file1.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(<span class="string">"script"</span>);</span><br></pre></td></tr></table></figure>
<p>无论何时启动下载,文件的下载和执行过程都不会阻塞页面的其他进程。当代码包含供其他页面其他脚本调用的接口时,可以用&lt;script&gt;元素触发一个load事件来实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line"></span><br><span class="line">script.onload= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Script loaded!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">script.src = <span class="string">"file1.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>
<p>下面函数封装了标准及IE特有的实现方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span>  script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (script.readyState)&#123;</span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>)&#123;</span><br><span class="line">                script.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//其他浏览器</span></span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    script.src = url;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果多个文件的下载顺序很重要,更好的做法是把它们按正确顺序合并成一个文件。动态脚本加载凭借着它在跨浏览器兼容性和易用的优势,成为最通用的无阻塞加载解决方案。</p>
<h4 id="XMLHttpRequest脚本注入">XMLHttpRequest脚本注入</h4><p> 另一种无阻塞加载脚本的方法是使用XMLHttpRequest(XHR)对象获取脚本并注入页面中。创建一个XHR对象,然后用它下载JavaScript文件,最后通过创建动态&lt;script&gt;元素将代码注入页面中。下面是例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> xht = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"file1.js"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.state &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">            script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">            script.text = xhr.responseText;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式的主要局限性是JavaScript文件必须与所请求的页面处于相同的域,这意味着JavaScript文件不能从CDN下载。因此,大型的Web应用通常不会采用XHR脚本注入技术。</p>
<h4 id="推荐的无阻塞模式">推荐的无阻塞模式</h4><p> 当向页面中添加大量javascript的的代码时,可以先动态加载所需代码(比如前面讲的loadScript函数),让后加载初始化页面剩下的代码。<br>例子：放到body闭合标签之前。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;scirpt type=<span class="string">"text/javascript"</span> src=<span class="string">"loader.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    loadScript(<span class="string">"the-test.js"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Application.init();</span><br><span class="line">    &#125;);    </span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>第二种是把loadScript函数直接嵌入页面,避免多产生一次HTTP请求。<br>例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;scirpt type="text/javascript"&gt;</span><br><span class="line">    function loadScript(url, callback)&#123;</span><br><span class="line">        </span><br><span class="line">            var  script = document.createElement("script");</span><br><span class="line">            script.type = "text/javascript";</span><br><span class="line">            </span><br><span class="line">            if (script.readyState)&#123;</span><br><span class="line">                script.onreadystatechange = function()&#123;</span><br><span class="line">                    if (script.readyState == "loaded" || script.readyState == "complete")&#123;</span><br><span class="line">                        script.onreadystatechange = null;</span><br><span class="line">                        callback();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;else&#123; //其他浏览器</span><br><span class="line">                script.onload = function()&#123;</span><br><span class="line">                    callback();</span><br><span class="line">                &#125;;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            script.src = url;</span><br><span class="line">            document.getElementsByTagName("head")[0].appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    loadScript("the-test.js",function()&#123;</span><br><span class="line">        Application.init();</span><br><span class="line">    &#125;);    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果采用第二种方式,建议使用YUI Compressor 把初始化代码压缩到最小尺寸。</p>
<p><strong>YUI3 的方式</strong><br> 由页面中的少量代码来加载丰富的功能组件。在页面中使用YUI3:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//只需在YUI的use()方法中声明("dom")并提供回调函数即可:</span><br><span class="line">YUI().use("dom",function()&#123;</span><br><span class="line">    Y.DOM.addClass(document.body,"loaded");</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<p><strong>lazyLoad类库</strong><br> lazload是loadScript()函数的增强版。用法示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"lazyload-min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    lazyload.js(<span class="string">"the-rest.js"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Application.init();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>同样支持下载多个Javascript文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"lazyload-min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    lazyload.js([<span class="string">"first-file.js"</span>,<span class="string">"the-rest.js"</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Application.init();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>建议减少文件数,因为每次下载还是一个独立的HTTP请求,而且回调函数会等待所有文件都下载完成后才会执行。<br>lazyload同样可以加载css,但没太大意义.因为css文件本是并行下载,不会阻塞页面的其他进程。</p>
<p><strong>LANjs</strong><br> 该工具对加载过程更精细的控制,并试图同时下载尽可能多的代码。用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lab.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="php"></span><br><span class="line">    <span class="variable">$LAB</span>.script(<span class="string">"the-rest.js"</span>) <span class="comment">//需要下载的文件</span></span><br><span class="line">        .wait(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;  <span class="comment">//下在执行完毕后所调用的函数</span></span><br><span class="line">            Application.init();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>下载多个javascript文件,只需链式调用另一个$LAB.script()方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lab.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="openscad"></span><br><span class="line">    $LAB.script<span class="params">(<span class="string">"first-file.js"</span>)</span> <span class="comment">//需要下载的文件</span></span><br><span class="line">        .script<span class="params">(<span class="string">"the-rest.js"</span>)</span> <span class="comment">//需要下载的文件</span></span><br><span class="line">        .wait<span class="params">(function<span class="params">()</span>&#123;  //下在执行完毕后所调用的函数</span><br><span class="line">            Application.init<span class="params">()</span>;</span><br><span class="line">        &#125;)</span>;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>LAB 允许你使用wait()方法来指定哪些文件需要等待其他文件加载并执行完。只需在script()后面加上wait()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lab.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="openscad"></span><br><span class="line">    $LAB.script<span class="params">(<span class="string">"first-file.js"</span>)</span>.wait<span class="params">()</span> <span class="comment">//需要下载的文件</span></span><br><span class="line">        .script<span class="params">(<span class="string">"the-rest.js"</span>)</span> <span class="comment">//需要下载的文件</span></span><br><span class="line">        .wait<span class="params">(function<span class="params">()</span>&#123;  //下在执行完毕后所调用的函数</span><br><span class="line">            Application.init<span class="params">()</span>;</span><br><span class="line">        &#125;)</span>;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4><p> 列举几种方法减少javascript对性能的影响：</p>
<ul>
<li>&lt;body&gt;闭合标签之前,将所有的&lt;script&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染。</li>
<li>合并脚本。页面中的&lt;script&gt;标签越少,加载也就越快,响应也更迅速。无论外链文件还是内嵌脚本都是如此。</li>
<li>有多种无阻塞下载javascript的方法：<ul>
<li>使用&lt;script&gt;标签的defer属性;</li>
<li>使用动态创建的&lt;script&gt;元素来下载并执行代码。</li>
<li>使用XHR对象下载JavaScript代码并注入页面中。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript的加载和执行的性能优化。]]>
    
    </summary>
    
      <category term="性能优化" scheme="/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传递消息：HTML5的脚本通信技术(四)]]></title>
    <link href="/2016/05/28/ScriptCommunication/"/>
    <id>/2016/05/28/ScriptCommunication/</id>
    <published>2016-05-28T14:51:19.000Z</published>
    <updated>2016-06-18T03:10:19.965Z</updated>
    <content type="html"><![CDATA[<h4 id="主要内容">主要内容</h4><ul>
<li>服务器发送事件和服务器端发起的事件驱动通信</li>
<li>用于双向、事件驱动通信的WebSocket</li>
<li>不同域间页面的客户端通信</li>
</ul>
<h6 id="服务器发送事件(SSE)">服务器发送事件(SSE)</h6><p>两大优点:</p>
<ul>
<li>服务器驱动的通信</li>
<li>反复创建连接与添加报头的开销较小</li>
</ul>
<p>SSE聊天应用是通过ajax发送消息到服务器端,而客户端接收消息是从服务器端的发送事件。</p>
<p>在旧浏览器上应用类似SSE的技术：最明显的方法就是利用持久数据帧技术,还有一种,就是利用预构建库作为回退方案。EventSource.js库。</p>
<p>默认SSE是3秒自动请求一次服务器,类似轮询,意义不大。同ajax每3秒一次请求差不多,对手机端性能消耗大。</p>
<p>那么如何实现让服务器主动推送呢。其实很简单，只要让服务器保持 HTTP 会话不关闭，当有新的更新时，立刻输出，并 flush() 即可。<br>服务器主动推送到客户端 ( push )，而非客户端轮询 ( pull )。</p>
<p><a href="http://pan.baidu.com/s/1nu9k0R3" target="_blank" rel="external">聊天应用下载</a>PHP做为服务器。服务器搭建,php,mysql数据之类网上搜索如何安装配置。</p>
<p><strong>何时使用SSE</strong><br>明显的缺点:</p>
<ul>
<li>只能从服务器向客户端发起通信</li>
<li>相比长轮询或持久数据帧机制来说,SSE的优势并不明显。<br>相比WebSocket的一些优势:</li>
<li>SSE是一种非常简单的连线协议。</li>
<li>在比较便宜的托管服务器上容易实现。<br>在自己的业余项目,可以尝试。但在那些高负载,Web规模的初创企业来说,经常需要调整基础设施,那么应该使用WebSocket方案。</li>
</ul>
<h6 id="WebSocket创建的实时通信Web应用(node服务端)">WebSocket创建的实时通信Web应用(node服务端)</h6><p>一个简单的websocket例子：<br>需要的模块npm install websocket<br>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="comment">//这一行代码创建一个WebSocket对象,这里的URL使用的是ws://协议。</span></span><br><span class="line">    <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.data); <span class="comment">//接受服务器事件并输出到控制台上</span></span><br><span class="line">    &#125;</span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//当创建的WebSocket对象通过浏览器成功开启后,就会触发onopen事件,这个函数会向服务器发送消息。</span></span><br><span class="line">        ws.send(<span class="string">'My Message'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>后台：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'websocket'</span>).server;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params">req,res</span>) </span>&#123; <span class="comment">//响应HTTP请求</span></span><br><span class="line">    fs.readFile(__dirname + <span class="string">'/websocket-sample.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.writeHead(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'Error loading websocket-sample.html'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(handler); <span class="comment">//创建一个基本的HTTP服务器对象。</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//启动服务器,将监听端口设定为8080</span></span><br><span class="line">    <span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="string">"Server is listening on port 8080"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">wsServer = <span class="keyword">new</span> WebSocketServer(&#123;</span><br><span class="line">    httpServer:app <span class="comment">//websocket 模块用来扩展HTTP服务器。HTTP服务器对象被作为一个参数传入WebSocket服务器对象中。</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">wsServer.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request</span>)</span>&#123; <span class="comment">//该处理器用来响应客户端的WebSocket请求。</span></span><br><span class="line">    <span class="keyword">var</span> connection = request.accept(<span class="literal">null</span>, request.origin);</span><br><span class="line">    <span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="string">" Connection accepted."</span>);</span><br><span class="line">    connection.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123; <span class="comment">//当客户端连接到 WebSocket上时,添加一个处理器来接收消息。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Received message:"</span> + message.utf8Data);</span><br><span class="line">        connection.sendUTF(message.utf8Data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h6 id="客户端上的通信">客户端上的通信</h6><p> 跨文档通信与跨域通信不是一样的,是发生在同一个域中的页面之间。<br>同源策略指的是: 在页面中,从某一个域加载的脚本不能访问从另一个域加载的窗口内容。<br>借助跨文档通信API中的postMessage方法与onmessage事件,能在两个页面之间创建一个受控制的通信通道。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Post Message<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:200px; float:left; margin-right:200px;border:solid 1px #333;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"color"</span>&gt;</span>Frame Color<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"child"</span> <span class="attribute">src</span>=<span class="value">"http://lsLib.com/lsLib.html"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="http"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.frames[<span class="number">0</span>].postMessage(<span class="string">'getcolor'</span>,<span class="string">'http://lslib.com'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> color=e.data;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'color'</span>).style.backgroundColor=color;</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">    </span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">http://test.com/index.html</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">html</span>,<span class="tag">body</span><span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">100%</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0px</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span> <span class="attribute">style</span>=<span class="value">"height:100%;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"container"</span> <span class="attribute">onclick</span>=<span class="value">"changeColor();"</span> <span class="attribute">style</span>=<span class="value">"widht:100%; height:100%; background-color:rgb(204, 102, 0);"</span>&gt;</span></span><br><span class="line">            click to change color</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="mel"></span><br><span class="line">            var <span class="keyword">container</span>=document.getElementById(<span class="string">'container'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">window</span>.addEventListener(<span class="string">'message'</span>,function(e)&#123;</span><br><span class="line">                <span class="keyword">if</span>(e.<span class="keyword">source</span>!=<span class="keyword">window</span>.<span class="keyword">parent</span>) <span class="keyword">return</span>;</span><br><span class="line">                var <span class="keyword">color</span>=<span class="keyword">container</span>.style.backgroundColor;</span><br><span class="line">                <span class="keyword">window</span>.<span class="keyword">parent</span>.postMessage(<span class="keyword">color</span>,<span class="string">'*'</span>);</span><br><span class="line">            &#125;,false);</span><br><span class="line"></span><br><span class="line">            function changeColor () &#123;            </span><br><span class="line">                var <span class="keyword">color</span>=<span class="keyword">container</span>.style.backgroundColor;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">color</span>==<span class="string">'rgb(204, 102, 0)'</span>)&#123;</span><br><span class="line">                    <span class="keyword">color</span>=<span class="string">'rgb(204, 204, 0)'</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">color</span>=<span class="string">'rgb(204,102,0)'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">container</span>.style.backgroundColor=<span class="keyword">color</span>;</span><br><span class="line">                <span class="keyword">window</span>.<span class="keyword">parent</span>.postMessage(<span class="keyword">color</span>,<span class="string">'*'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">http://lslib.com/lslib.html</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解HTML5的脚本通信技术。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过three.js画一个简单的圆柱图谱]]></title>
    <link href="/2016/05/28/threejsChart/"/>
    <id>/2016/05/28/threejsChart/</id>
    <published>2016-05-28T13:01:52.000Z</published>
    <updated>2016-06-29T15:30:31.190Z</updated>
    <content type="html"><![CDATA[<h4 id="通过threejs画一个简单的圆柱图谱">通过threejs画一个简单的圆柱图谱</h4><p> 简单描述工作中需要的功能,需要一个3D的图谱,在图谱上监测塔基和塔顶的晃动程度,并以贝塞尔曲线的方式展示出来。数据都是现场采集过来。当然本文是模拟的数据。</p>
<h4 id="介绍代码">介绍代码</h4><p><a href="https://shizhidi.github.io/assets/examples/CylinderGeometry/index.html" target="_blank" rel="external">查看该文例子</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br></pre></td><td class="code"><pre><span class="line">var twoPi = Math.PI * <span class="number">2</span>,oneDeg = Math.PI / <span class="number">180</span>,maxValue,alarmValue = <span class="number">0.05</span>,number = <span class="number">10</span>,startColor = <span class="number">0</span>;</span><br><span class="line">var scene = new THREE.Scene();</span><br><span class="line">var camera = new THREE.PerspectiveCamera( <span class="number">75</span>, window.innerWidth / window.innerHeight, <span class="number">0.1</span>, <span class="number">50</span> );</span><br><span class="line">camera.position.z = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">var renderer = new THREE.WebGLRenderer( &#123; antialias: <span class="literal">true</span> &#125; );</span><br><span class="line">renderer.setPixelRatio( window.devicePixelRatio );</span><br><span class="line">renderer.setSize( window.innerWidth, window.innerHeight );</span><br><span class="line">document.body.appendChild( renderer.domElement );</span><br><span class="line"></span><br><span class="line">var orbit = new THREE.OrbitControls( camera, renderer.domElement );</span><br><span class="line">orbit.enableZoom = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">var ambientLight = new THREE.AmbientLight( <span class="number">0</span>x000000 );</span><br><span class="line">scene.add( ambientLight );</span><br><span class="line"></span><br><span class="line">var lights = [];</span><br><span class="line">lights[ <span class="number">0</span> ] = new THREE.PointLight( <span class="number">0</span>xffffff, <span class="number">1</span>, <span class="number">0</span> );</span><br><span class="line">lights[ <span class="number">1</span> ] = new THREE.PointLight( <span class="number">0</span>xffffff, <span class="number">1</span>, <span class="number">0</span> );</span><br><span class="line">lights[ <span class="number">2</span> ] = new THREE.PointLight( <span class="number">0</span>xffffff, <span class="number">1</span>, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">lights[ <span class="number">0</span> ].position.set( <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span> );</span><br><span class="line">lights[ <span class="number">1</span> ].position.set( <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span> );</span><br><span class="line">lights[ <span class="number">2</span> ].position.set( - <span class="number">100</span>, - <span class="number">200</span>, - <span class="number">100</span> );</span><br><span class="line"></span><br><span class="line">scene.add( lights[ <span class="number">0</span> ] );</span><br><span class="line">scene.add( lights[ <span class="number">1</span> ] );</span><br><span class="line">scene.add( lights[ <span class="number">2</span> ] );</span><br><span class="line"></span><br><span class="line">var mesh = new THREE.Object3D();</span><br><span class="line"></span><br><span class="line">mesh.add( new THREE.LineSegments(</span><br><span class="line"></span><br><span class="line">        new THREE.Geometry(),</span><br><span class="line"></span><br><span class="line">        new THREE.LineBasicMaterial( &#123;</span><br><span class="line">            color: <span class="number">0</span>xffffff,</span><br><span class="line">            transparent: <span class="literal">true</span>,</span><br><span class="line">            opacity: <span class="number">1</span></span><br><span class="line">        &#125; )</span><br><span class="line"></span><br><span class="line">) );</span><br><span class="line"></span><br><span class="line">var originalData = [</span><br><span class="line">    &#123;dire:<span class="number">30</span>,angle:<span class="number">0.0198</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">33</span>,angle:<span class="number">0.0227</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">36</span>,angle:<span class="number">0.0173</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">34</span>,angle:<span class="number">0.0232</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">36</span>,angle:<span class="number">0.0208</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">35</span>,angle:<span class="number">0.0226</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">35</span>,angle:<span class="number">0.0223</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">32</span>,angle:<span class="number">0.0194</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">30</span>,angle:<span class="number">0.0182</span>,time:<span class="number">1462428620</span>&#125;,</span><br><span class="line">    &#123;dire:<span class="number">30</span>,angle:<span class="number">0.0199</span>,time:<span class="number">1462428620</span>&#125;</span><br><span class="line">],originalData3D = [];</span><br><span class="line"></span><br><span class="line">//产生随机数</span><br><span class="line"><span class="keyword">function</span>  <span class="function"><span class="title">randomNumber</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (originalData.length != <span class="number">0</span>) originalData.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span> ; i &lt; number; i++ ) &#123;</span><br><span class="line">        originalData.push(&#123;</span><br><span class="line">            dire: Math.random()*<span class="number">10</span> + <span class="number">30</span>,</span><br><span class="line">            angle: Math.random()*<span class="number">0.1</span>,</span><br><span class="line">            time: <span class="number">14623134564</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加曲线</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addCurve</span></span>() &#123;</span><br><span class="line">    originalData3D.forEach(<span class="keyword">function</span>(val,index,array)&#123;</span><br><span class="line">        var avgColor = parseInt((<span class="number">255</span>-startColor) / number);</span><br><span class="line">        var curve = new THREE.CubicBezierCurve3(</span><br><span class="line">                new THREE.Vector3( val[<span class="number">0</span>].x[<span class="number">2</span>], <span class="number">11</span>, val[<span class="number">0</span>].z[<span class="number">2</span>] ),</span><br><span class="line">                new THREE.Vector3( val[<span class="number">0</span>].x[<span class="number">1</span>], <span class="number">8</span>, val[<span class="number">0</span>].z[<span class="number">1</span>] ),</span><br><span class="line">                new THREE.Vector3( val[<span class="number">0</span>].x[<span class="number">0</span>], <span class="number">4</span>, val[<span class="number">0</span>].z[<span class="number">0</span>] ),</span><br><span class="line">                new THREE.Vector3( <span class="number">0</span>, -<span class="number">11</span>, <span class="number">0</span> )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        var geometry = new THREE.Geometry(),color = <span class="string">'rgb(0,'</span>+ (startColor+avgColor*(index+<span class="number">1</span>)) +<span class="string">',0)'</span>;</span><br><span class="line">        geometry.vertices = curve.getPoints( <span class="number">50</span> );</span><br><span class="line"></span><br><span class="line">//                    <span class="keyword">if</span> ( originalData[index].angle &gt; alarmValue)&#123;</span><br><span class="line">//                        color = <span class="string">'rgb(255,0,0)'</span>;</span><br><span class="line">//                    &#125;</span><br><span class="line"></span><br><span class="line">        var line = new THREE.Line(</span><br><span class="line">                geometry,</span><br><span class="line">                new THREE.LineBasicMaterial( &#123;</span><br><span class="line">                    color : color,</span><br><span class="line">                    linewidth : <span class="number">1.5</span></span><br><span class="line">                &#125; )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        line.name = <span class="string">'curve'</span>;</span><br><span class="line"></span><br><span class="line">        mesh.add(line);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//添加圆形上的弧度数</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addRadian</span></span>() &#123;</span><br><span class="line">    var avgVal = maxValue / <span class="number">5</span>,radius = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">    var data = &#123;</span><br><span class="line">        text : <span class="string">''</span>,</span><br><span class="line">        size : <span class="number">5</span>,</span><br><span class="line">        height : <span class="number">2</span>,</span><br><span class="line">        curveSegments : <span class="number">12</span>,</span><br><span class="line">        font : <span class="string">"helvetiker"</span>,</span><br><span class="line">        weight : <span class="string">"regular"</span>,</span><br><span class="line">        bevelEnabled : <span class="literal">false</span>,</span><br><span class="line">        bevelThickness : <span class="number">1</span>,</span><br><span class="line">        bevelSize : <span class="number">0.5</span></span><br><span class="line">    &#125;;</span><br><span class="line">    var loader = new THREE.FontLoader();</span><br><span class="line"></span><br><span class="line">    loader.load( <span class="string">'fonts/'</span> + data.font + <span class="string">'_'</span> + data.weight + <span class="string">'.typeface.js'</span>, <span class="keyword">function</span> ( font ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (var j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)&#123;</span><br><span class="line">                data.text = <span class="string">'0'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                var tempNub = (avgVal * radius[j-<span class="number">1</span>]);</span><br><span class="line">                data.text = tempNub.toFixed(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            var geometry = new THREE.TextGeometry( data.text, &#123;</span><br><span class="line">                font: font,</span><br><span class="line">                size: data.size,</span><br><span class="line">                height: data.height,</span><br><span class="line">                curveSegments: data.curveSegments,</span><br><span class="line">                bevelEnabled: data.bevelEnabled,</span><br><span class="line">                bevelThickness: data.bevelThickness,</span><br><span class="line">                bevelSize: data.bevelSize</span><br><span class="line">            &#125; );</span><br><span class="line"></span><br><span class="line">            switch (j)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    geometry.center();</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    geometry.scale(<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>);</span><br><span class="line">                    geometry.translate ( <span class="number">0.2</span>, <span class="number">11</span>, -<span class="number">0.3</span> );</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    geometry.center();</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    geometry.scale(<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>);</span><br><span class="line">                    geometry.translate ( <span class="number">1.8</span>, <span class="number">11</span>, -<span class="number">0.3</span> );</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    geometry.center();</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    geometry.scale(<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>);</span><br><span class="line">                    geometry.translate ( <span class="number">3.6</span>, <span class="number">11</span>, -<span class="number">0.3</span> );</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    geometry.center();</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    geometry.scale(<span class="number">0.05</span>,<span class="number">0.05</span>,<span class="number">0.05</span>);</span><br><span class="line">                    geometry.translate ( <span class="number">5.6</span>, <span class="number">11</span>, -<span class="number">0.3</span> );</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                default :</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var radian = new THREE.Mesh(</span><br><span class="line">                            geometry,</span><br><span class="line">                            new THREE.MeshPhongMaterial(&#123;</span><br><span class="line">                                color: <span class="number">0</span>x156289,</span><br><span class="line">                                emissive: <span class="number">0</span>x072534,</span><br><span class="line">                                side: THREE.DoubleSide,</span><br><span class="line">                                shading: THREE.FlatShading</span><br><span class="line">                            &#125;)</span><br><span class="line">                        );</span><br><span class="line"></span><br><span class="line">            radian.name = <span class="string">'radian'</span>;</span><br><span class="line"></span><br><span class="line">            mesh.add(radian);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 按比例尺换算所需的<span class="number">3</span>D数据点</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">conversion</span></span>()&#123;</span><br><span class="line">    maxValue = d3.max(originalData.map(<span class="keyword">function</span>(o)&#123;</span><br><span class="line">        <span class="built_in">return</span> o.angle;</span><br><span class="line">    &#125;));</span><br><span class="line">    maxValue += <span class="number">0.05</span>;</span><br><span class="line">    var scale = d3.scale.linear()</span><br><span class="line">            .domain([<span class="number">0</span>,maxValue])</span><br><span class="line">            .range([<span class="number">0</span>,<span class="number">5</span>]),oneDeg = Math.PI / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">    originalData.forEach(<span class="keyword">function</span>(val,index,array)&#123;</span><br><span class="line">        var tempData = [],cxArray = [],cyArray = [];</span><br><span class="line">        var cx = scale(val.angle) * Math.cos(oneDeg*val.dire - Math.PI/<span class="number">2</span>);</span><br><span class="line">        var cy = scale(val.angle) * Math.sin(oneDeg*val.dire - Math.PI/<span class="number">2</span>);</span><br><span class="line">        var avgCx = cx / <span class="number">3</span>;</span><br><span class="line">        var avgCy = cy / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">            cxArray.push(avgCx * i);</span><br><span class="line">            cyArray.push(avgCy * i);</span><br><span class="line">        &#125;</span><br><span class="line">        cxArray.push(cx);</span><br><span class="line">        cyArray.push(cy);</span><br><span class="line">        tempData.push(&#123;</span><br><span class="line">            x : cxArray,</span><br><span class="line">            z : cyArray</span><br><span class="line">        &#125;);</span><br><span class="line">        originalData3D.push(tempData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//画圆形</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">addCircles</span></span>()&#123;</span><br><span class="line">    var radius = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)&#123;</span><br><span class="line">        var geometry = new THREE.CircleGeometry( radius[i], <span class="number">64</span> );</span><br><span class="line">        geometry.translate ( <span class="number">0</span>, <span class="number">0</span>, -<span class="number">11</span> );</span><br><span class="line">        geometry.rotateX(oneDeg*<span class="number">90</span>);</span><br><span class="line">//                geometry.rotateY(oneDeg*<span class="number">90</span>);</span><br><span class="line">        var circle = new THREE.Line(</span><br><span class="line">                        geometry,</span><br><span class="line">                        new THREE.LineBasicMaterial( &#123;</span><br><span class="line">                            color: <span class="number">0</span>xffffff,</span><br><span class="line">                            transparent: <span class="literal">true</span>,</span><br><span class="line">                            opacity: <span class="number">1</span></span><br><span class="line">                        &#125; )</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">        circle.name = <span class="string">'circle'</span>;</span><br><span class="line"></span><br><span class="line">        mesh.add(circle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">LoadFonts</span></span>()&#123;</span><br><span class="line">    //载入stl文字 [<span class="string">'north'</span>,<span class="string">'east'</span>,<span class="string">'south'</span>,<span class="string">'west'</span>]</span><br><span class="line">    var fonts = [<span class="string">'north'</span>,<span class="string">'east'</span>,<span class="string">'south'</span>,<span class="string">'west'</span>];</span><br><span class="line">    fonts.forEach(<span class="keyword">function</span>(val,index,arr)&#123;</span><br><span class="line">        var loader = new THREE.STLLoader();</span><br><span class="line">        loader.addEventListener(<span class="string">'load'</span>, <span class="keyword">function</span>(event) &#123;</span><br><span class="line">            <span class="keyword">if</span> (geometry) geometry.dispose();</span><br><span class="line">            var geometry = event.content;</span><br><span class="line">            var material = new THREE.MeshPhongMaterial(&#123;</span><br><span class="line">                color: <span class="number">0</span>x156289,</span><br><span class="line">                emissive: <span class="number">0</span>x072534,</span><br><span class="line">                side: THREE.DoubleSide,</span><br><span class="line">                shading: THREE.FlatShading</span><br><span class="line">            &#125;);</span><br><span class="line">            //转换角度</span><br><span class="line">            switch (val)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'north'</span>:</span><br><span class="line">                    geometry.scale(<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>);</span><br><span class="line">                    geometry.translate ( -<span class="number">2.4</span>, <span class="number">3</span>, -<span class="number">11</span> );</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'east'</span>:</span><br><span class="line">                    geometry.scale(<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>);</span><br><span class="line">                    geometry.translate ( <span class="number">5.5</span>, -<span class="number">1</span>, -<span class="number">11</span> );</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'south'</span>:</span><br><span class="line">                    geometry.scale(<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>);</span><br><span class="line">                    geometry.translate ( -<span class="number">2</span>, -<span class="number">9</span>, -<span class="number">11</span> );</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'west'</span>:</span><br><span class="line">                    geometry.scale(<span class="number">0.6</span>,<span class="number">0.6</span>,<span class="number">0.6</span>);</span><br><span class="line">                    geometry.translate ( -<span class="number">8</span>, -<span class="number">1</span>, -<span class="number">11</span> );</span><br><span class="line">                    geometry.rotateX(oneDeg*-<span class="number">90</span>);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                default :</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var font = new THREE.Mesh(geometry, material);</span><br><span class="line">            font.name = <span class="string">'font'</span>;</span><br><span class="line"></span><br><span class="line">            mesh.add(font);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        loader.load(<span class="string">'fonts/'</span>+val+<span class="string">'.STL'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randomNumber();</span><br><span class="line">//传递原始的倾斜角度和方位角度</span><br><span class="line">conversion();</span><br><span class="line"></span><br><span class="line">addCircles();</span><br><span class="line"></span><br><span class="line">LoadFonts();</span><br><span class="line"></span><br><span class="line">addCurve();</span><br><span class="line"></span><br><span class="line">addRadian();</span><br><span class="line"></span><br><span class="line">//添加圆柱体的材质</span><br><span class="line">/*mesh.add( new THREE.Mesh(</span><br><span class="line"></span><br><span class="line">    new THREE.Geometry(),</span><br><span class="line"></span><br><span class="line">    new THREE.MeshPhongMaterial( &#123;</span><br><span class="line">        color: <span class="number">0</span>x156289,</span><br><span class="line">        emissive: <span class="number">0</span>x072534,</span><br><span class="line">        side: THREE.DoubleSide,</span><br><span class="line">        shading: THREE.FlatShading</span><br><span class="line">    &#125; )</span><br><span class="line"></span><br><span class="line">) );*/</span><br><span class="line"></span><br><span class="line">var options = (<span class="keyword">function</span> CylinderGeometry( mesh ) &#123;</span><br><span class="line"></span><br><span class="line">    var data = &#123;</span><br><span class="line">        radiusTop : <span class="number">5</span>,</span><br><span class="line">        radiusBottom : <span class="number">5</span>,</span><br><span class="line">        height : <span class="number">22</span>,</span><br><span class="line">        radiusSegments : <span class="number">64</span>,</span><br><span class="line">        heightSegments : <span class="number">1</span>,</span><br><span class="line">        openEnded : <span class="literal">false</span>,</span><br><span class="line">        thetaStart : <span class="number">0</span>,</span><br><span class="line">        thetaLength : twoPi</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var geometry = new THREE.CylinderGeometry(</span><br><span class="line">                        data.radiusTop,</span><br><span class="line">                        data.radiusBottom,</span><br><span class="line">                        data.height,</span><br><span class="line">                        data.radiusSegments,</span><br><span class="line">                        data.heightSegments,</span><br><span class="line">                        data.openEnded,</span><br><span class="line">                        data.thetaStart,</span><br><span class="line">                        data.thetaLength</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">    mesh.children[ <span class="number">0</span> ].geometry.dispose();</span><br><span class="line"></span><br><span class="line">    mesh.children[ <span class="number">0</span> ].geometry = geometry;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">&#125;)(mesh);</span><br><span class="line"></span><br><span class="line">scene.add( mesh );</span><br><span class="line"></span><br><span class="line">var prevFog = <span class="literal">false</span>;</span><br><span class="line">mesh.rotation.x = <span class="number">1.06</span>;</span><br><span class="line"></span><br><span class="line">var render = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame( render );</span><br><span class="line"></span><br><span class="line">    var time = Date.now() * <span class="number">0.001</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ! options.fixed ) &#123;</span><br><span class="line">//					mesh.rotation.y += <span class="number">0.005</span>;</span><br><span class="line">//                    console.log(mesh.rotation.x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    renderer.render( scene, camera );</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">window.addEventListener( <span class="string">'resize'</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"></span><br><span class="line">    camera.aspect = window.innerWidth / window.innerHeight;</span><br><span class="line">    camera.updateProjectionMatrix();</span><br><span class="line"></span><br><span class="line">    renderer.setSize( window.innerWidth, window.innerHeight );</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line"></span><br><span class="line">/*<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var length = mesh.children.length;</span><br><span class="line"></span><br><span class="line">    var meshChildren = mesh.children.filter(<span class="keyword">function</span>(val,index,arr)&#123;</span><br><span class="line">        <span class="keyword">if</span> (val.name != <span class="string">'curve'</span> &amp;&amp; val.name != <span class="string">'radian'</span>)&#123;</span><br><span class="line">            <span class="built_in">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mesh.children = meshChildren;</span><br><span class="line">    renderer.render( scene, camera );</span><br><span class="line"></span><br><span class="line">    //实时从采集器采集数据</span><br><span class="line">    randomNumber();</span><br><span class="line">    //传递原始的倾斜角度和方位角度</span><br><span class="line">    conversion();</span><br><span class="line"></span><br><span class="line">    addRadian();</span><br><span class="line"></span><br><span class="line">    addCurve();</span><br><span class="line"></span><br><span class="line">    renderer.render( scene, camera );</span><br><span class="line">&#125;,<span class="number">5000</span>);*/</span><br></pre></td></tr></table></figure>
<h4 id="附上中文快速入门3D图形学知识">附上中文快速入门3D图形学知识</h4><p> 快速了解threejs三大组建,场景,相机,灯光,材质,渲染器,坐标系。<a href="http://www.hewebgl.com/article/articledir/1" target="_blank" rel="external">链接地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解通过threejs画一个简单的圆柱图谱。]]>
    
    </summary>
    
      <category term="3Dchart,threejs" scheme="/tags/3Dchart-threejs/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[文件编辑和管理：富文本格式、文件存储、拖放(三)]]></title>
    <link href="/2016/05/25/fileEditingAndManagement/"/>
    <id>/2016/05/25/fileEditingAndManagement/</id>
    <published>2016-05-25T14:52:30.000Z</published>
    <updated>2016-06-15T14:48:58.585Z</updated>
    <content type="html"><![CDATA[<h4 id="主要内容">主要内容</h4><ul>
<li>富文本HTML编辑</li>
<li>利用地理定位进行位置识别</li>
<li>在本地文件系统中使用文件</li>
<li>实现拖放操作</li>
</ul>
<h4 id="Super_HTML5_Editor_编辑器"><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch3/index.html" target="_blank" rel="external">Super HTML5 Editor 编辑器</a></h4><p><strong>通过编辑器实例,将掌握以下知识点。</strong></p>
<ul>
<li>HTML Editing API。 用户可以使用富文本控件来编辑HTML标签。</li>
<li>Geolocation API。 可以获取用户当前位置,以供地图使用。</li>
<li>File System API。通过客户端沙盒来存储用户文件。</li>
<li>拖放操作。可以简化文件的导入和导出操作。</li>
<li>探讨单页应用对用户的好处。</li>
</ul>
<h6 id="Super_HTML5_Editor：应用概述">Super HTML5 Editor：应用概述</h6><p> 可以创建空文件,可以从本地计算机导入文件,查看已存在的文件,对文件执行查看、编辑、删除、导出操作。还可进行拖放操作。可以用两种编辑器来编辑文件内容：可视化的“所见即所得”的编辑器与原始的HTML标记编辑器。可以保存修改结果,预览文件内容并返回文件编辑器界面。如不保存修改就离开编辑器视图,就会警告。<br>当用Chrome在本地目录(不是服务器端)测试实例时,需要在Chrome后面加上下面这行: <strong>—Allow-File-Access-From-Files</strong><br>如果不这样做，客户端文件系统就会无法访问,Geolocation API也就无法定位你的当前位置了。</p>
<h6 id="富文本编辑与地理定位">富文本编辑与地理定位</h6><ul>
<li>利用designMode属性提示浏览器,使HTML页面可以编辑。</li>
<li>使用Editing API的execCommand方法来提供富文本编辑控制。</li>
<li>使用Geolocation API。</li>
</ul>
<h6 id="在本地管理文件:File_System_API_、Quota_Management_API、File_API_与_File_Writer_API">在本地管理文件:File System API 、Quota Management API、File API 与 File Writer API</h6><ul>
<li>使用File System API创建一种沙盒化的文件系统。</li>
<li>使用Quota Management API分配本地存储空间。</li>
<li>如何使用File Writer API与 File API来创建文件系统服务。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-富文本格式、文件存储、拖放操作。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建表单：输入小部件、数据绑定以及数据验证(二)]]></title>
    <link href="/2016/05/22/createForm/"/>
    <id>/2016/05/22/createForm/</id>
    <published>2016-05-22T13:44:07.000Z</published>
    <updated>2016-05-26T14:16:01.250Z</updated>
    <content type="html"><![CDATA[<h5 id="表单的功能概述与所需知识">表单的功能概述与所需知识</h5><p>允许用户输入个人数据、登录详细信息、订购及付款信息。<a href="https://shizhidi.github.io/assets/examples/html5-ia/ch2/index.html" target="_blank" rel="external">表单实例</a></p>
<p> 表单实例由4部分组成,每一部分都容纳在一个&lt;fieldset&gt;块中</p>
<ul>
<li>联系方式明细<br>请求用户名称(Full Name)、电子邮件地址(Email Address)、通讯地址(Postal Address)、家庭电话(Home Phone No)或移动电话(cell Phone No)<br>、Skype用户名(Skype Name)及Twitter(Twitter@)</li>
<li>登录明细<br>要求用户填写两次密码(确保前后输入的密码相同)</li>
<li>订单明细<br>包含3种产品的一个表,为每一种产品都提供了产品编号(Product Code)、产品描述(Description)及产品价格(Price)。用户可以输入每种产品的数量值(Qty),<br>单种产品的价格小计(Total)及整个订单的价格总计(Order Total)都能自动计算出来</li>
<li>付款明细<br>需要用户输入信用卡详细信息: 持卡人姓名(Name on Card)、信用卡号(Credit Card No.)、信用卡有效期(月/年)(Expiry Date)及卡片背面的CVV2安全码(CVV2 No.)</li>
</ul>
<p>在提交表单时,用户有两种选择: 提交订单或保存订单。“提交订单”按钮会执行数据验证及订单处理; “保存订单”按钮则将绕过数据验证,将所有订单细节保存下来,从而便于用户日后重新填写未完成的表单。</p>
<p><strong>该表单使用了一下这些HTML5的新特性</strong></p>
<ol>
<li>在适当的时候,利用表单的&lt;input&gt;元素类型(email、tel、number和month)及属性(required、pattern、autofocus、placeholder、max与min),为用户提供更好的部件及数据验证功能。</li>
<li>保存每一产品价格的data-*属性、valueNumber属性并以数字格式读取输入值,以及用&lt;output&gt;元素来呈现金额小计与总计。</li>
<li>通过formnovalidate与formaction属性来绕过数据验证并保存未完成的表单。</li>
<li>通过约束验证API来执行自定义验证,并及时发现用户所提交的表单中所包含的无效元素,利用css3伪类选择器处理无效元素的样式。</li>
<li>利用一些polyfill和JavaScript的Modernizr.js库,让表单更好地呈现在那些不支持HTML5特性的浏览器上。虽然从严格意义上来说,Modernizr.js和polyfill并不是HTML5的特性,但对于HTML5应用的实际开发来说,还是强烈建议使用它们。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-创建表单：输入小部件、数据绑定以及数据验证。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5:从文档到应用的转变(一)]]></title>
    <link href="/2016/05/19/html5Introduction/"/>
    <id>/2016/05/19/html5Introduction/</id>
    <published>2016-05-19T13:35:45.000Z</published>
    <updated>2016-05-31T16:05:19.693Z</updated>
    <content type="html"><![CDATA[<h4 id="简介">简介</h4><p> HTML5 是现在web开发的最热门主题之一,这是有充分理由的。这不仅因为他是最新的Web标记语言,<br>还因为它制定了Web应用开发的一整套标准。上一个版本的HTML语言(以及它那么严格著称的基于XML)主要<br>把HTML限定为一种用于页面文档的标记性语言。HTML5则是第一个将Web作为应用开发平台的HTML语言。</p>
<p> HTML5定义了一系列新元素,用以帮助开发者创建富互联网应用,另外还提供了一些标准javaScript API,<br>用来在浏览器内实现类原生应用。&lt;video&gt;元素就是HTML5的新元素中的一员,有了它,我们就可以在浏览器中<br>播放视频,而无需安装任何额外插件。另外,HTML5还提供了Media Element Interface,能让我们借助<br>JavaScript来控制视频播放。它还具有开发游戏,构建移动应用等诸多功能。</p>
<h5 id="探索标记语言:HTML5速览">探索标记语言:HTML5速览</h5><ol>
<li>HTML5文档的基本结构</li>
</ol>
<blockquote>
<p>文档以&lt;!DOCTYPE&gt;声明开头<br>其他<html> <head> <meta>信息及样式表,</head><body>与HTML4无差别。</body></html></p>
</blockquote>
<p> <strong>HTML5的一些细微差别</strong></p>
<ul>
<li>HTML5的DOCTYPE声明的格式;</li>
<li>如何使用开放的<html>元素;</html></li>
<li><p>在<head>部分中,如何使用各种元素的精简版本。</head></p>
<p>例子：<a href="https://shizhidi.github.io/assets/examples/html5-ia/ch1/hello.html" target="_blank" rel="external">Hello,World!</a></p>
</li>
</ul>
<ol>
<li><p>使用新的语义元素创建博客页面</p>
<p><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch1/html4-blog.html" target="_blank" rel="external">HTML4或XHTML来书写博客文章</a><br><strong>对比</strong><br><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch1/html5-blog.html" target="_blank" rel="external">HTML5来书写博客文章</a></p>
<p>另外两个重要的HTML5元素：&lt;aside&gt;与&lt;mark&gt;<br>你可以用&lt;aside&gt;元素来定义一个在页面中独立于主要内容区域的部分。可表现为边栏,如在一博客内,<br>可能会在文章旁边放上广告。<br>&lt;mark&gt;元素可以用来展示文档中应被标记或者说突出显示的文本部分,通常用来高亮显示文档中的搜索词。</p>
</li>
<li><p>使用ARIA角色来增强可访问性</p>
<p>WAI-ARIA指无障碍网页应用。主要针对的是视觉缺陷，失聪，行动不便的残疾人以及假装残疾的测试人员。尤其像盲人，眼睛看不到，其浏览网页则需要借助辅助设备，如屏幕阅读器，屏幕阅读机可以大声朗读或者输出盲文。<br>而ARIA就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！<br><a href="www.w3.org/TR/wai-aria/roles#combobox">WAI-ARIA1.0规范文档的一个范例</a></p>
</li>
<li><p>IE6~IE8的支持情况</p>
<p>在页面上应用&lt;header&gt;元素,将下列代码放入页面的&lt;head&gt;内。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="variable">&lt;script&gt;</span>document.createElement(<span class="string">"header"</span>);<span class="variable">&lt;/script&gt;</span></span><br><span class="line"><span class="variable">&lt;![endif]&gt;</span></span><br></pre></td></tr></table></figure>
<p>另一种是使用 HTML shiv脚本来解决这个问题。</p>
</li>
<li><p>HTML5所引入的新表单特性</p>
<p>使用新的表单输入类型,改善数据输入语义<br>HTML5引入的新表单输入类型,color,date,datetime,datetime-local,email,month,number,range,search,tel,time,url,week。<br>改变字段行为的新属性,拿其中的placeholder属性来说,它可以让文本字段在没有输入之前,显示一些预设文本。<br>HTML5新引入的输入元素属性<br>autocomplete autofocus list max min multiple pattern required step placeholder</p>
</li>
<li><p>进度条、度量器和可折叠内容</p>
<p>使用进度条来显示完成的进度</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">progress</span> <span class="attribute">value</span>=<span class="value">"50"</span> <span class="attribute">max</span>=<span class="value">"100"</span>&gt;</span><span class="tag">&lt;/<span class="title">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">progress</span>&gt;</span><span class="tag">&lt;/<span class="title">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用度量器来显示已知范围内的用户数据</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;meter <span class="variable">min=</span><span class="string">"0"</span> <span class="variable">max=</span><span class="string">"10"</span> <span class="variable">low=</span><span class="string">"3"</span> <span class="variable">high=</span><span class="string">"7"</span> <span class="variable">optimum=</span><span class="string">"9"</span> <span class="variable">value=</span><span class="string">"0"</span>&gt;&lt;/meter&gt;</span><br><span class="line">&lt;meter <span class="variable">min=</span><span class="string">"0"</span> <span class="variable">max=</span><span class="string">"10"</span> <span class="variable">low=</span><span class="string">"3"</span> <span class="variable">high=</span><span class="string">"7"</span> <span class="variable">optimum=</span><span class="string">"9"</span> <span class="variable">value=</span><span class="string">"1"</span>&gt;&lt;/meter&gt;</span><br><span class="line">&lt;meter <span class="variable">min=</span><span class="string">"0"</span> <span class="variable">max=</span><span class="string">"10"</span> <span class="variable">low=</span><span class="string">"3"</span> <span class="variable">high=</span><span class="string">"7"</span> <span class="variable">optimum=</span><span class="string">"9"</span> <span class="variable">value=</span><span class="string">"4"</span>&gt;&lt;/meter&gt;</span><br><span class="line">&lt;meter <span class="variable">min=</span><span class="string">"0"</span> <span class="variable">max=</span><span class="string">"10"</span> <span class="variable">low=</span><span class="string">"3"</span> <span class="variable">high=</span><span class="string">"7"</span> <span class="variable">optimum=</span><span class="string">"9"</span> <span class="variable">value=</span><span class="string">"7"</span>&gt;&lt;/meter&gt;</span><br><span class="line">&lt;meter <span class="variable">min=</span><span class="string">"0"</span> <span class="variable">max=</span><span class="string">"10"</span> <span class="variable">low=</span><span class="string">"3"</span> <span class="variable">high=</span><span class="string">"7"</span> <span class="variable">optimum=</span><span class="string">"9"</span> <span class="variable">value=</span><span class="string">"10"</span>&gt;&lt;/meter&gt;</span><br></pre></td></tr></table></figure>
<p>无需JavaScript,使用&lt;details&gt;和&lt;summary&gt;来创建可折叠内容</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;details&gt;</span></span><br><span class="line">    <span class="variable">&lt;summary&gt;</span>Section Heading<span class="variable">&lt;/summary&gt;</span></span><br><span class="line">    This is an example of using <span class="variable">&lt;details&gt;</span> and <span class="variable">&lt;summary&gt;</span>;</span><br><span class="line">    <span class="keyword">to</span> create collapsible content without using JavaScript.</span><br><span class="line"><span class="variable">&lt;/details&gt;</span></span><br></pre></td></tr></table></figure>
<p>回退方案参见 <a href="http://mng.bz/cJhc" target="_blank" rel="external">http://mng.bz/cJhc</a></p>
</li>
</ol>
<h5 id="标记：附加的Web规范">标记：附加的Web规范</h5><ol>
<li>微数据<br>使用HTML5中的微数据,可以为Web页面添加语义信息。另一方面,搜索引擎和浏览器也可以通过微数据,向用户提供额外的功能。下例展示微数据的实际应用。<br><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch1/html5-microdata.html" target="_blank" rel="external">微数据实例</a><br>微数据的使用,可以极大地改善应用(或Web页面)在搜索结果中的表现。</li>
</ol>
<h5 id="HTML5的DOM—API">HTML5的DOM—API</h5><p><strong>HTML5新增的DOM-API</strong></p>
<ul>
<li>2D Cancas</li>
<li>音频与视频</li>
<li>拖放</li>
<li>跨文档通信</li>
<li>服务器发送事件</li>
<li>WebSockets</li>
<li>文档编辑</li>
<li>Web Storage</li>
<li>离线Web 应用</li>
</ul>
<p><strong>其他API和规范</strong></p>
<ul>
<li>地理定位API(Geolocation_API)</li>
<li>索引数据库API(IndexedDB_API)</li>
<li>文件API、文件阅读器API、文件编辑器API与文件系统API</li>
<li>可伸缩矢量图形</li>
<li>Web Graphics Library</li>
</ul>
<p>HTML5是HTML自1991问世至今最重要的版本。尽管HTML开始只是一种比较简单的标记型语言,却现在已发展成为一种复杂的网页设计及Web应用开发的重要平台。另外,它和CSS及JavaScript有着非常紧密的关系。HTML5是最先认识到这一关系重要性的语言,并且其规范中囊括了许多的面向Web应用开发的JavaScrit API。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要介绍了html5及相关API详解。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派快速搭建hexo博客系统]]></title>
    <link href="/2016/03/12/BuildRaspberriesPie/"/>
    <id>/2016/03/12/BuildRaspberriesPie/</id>
    <published>2016-03-12T15:02:51.000Z</published>
    <updated>2016-05-21T03:31:14.016Z</updated>
    <content type="html"><![CDATA[<h2 id="物品清单">物品清单</h2><ol>
<li>树莓派一个</li>
<li>SDHC 读卡器 1个(可选,有就不用买)。</li>
<li>8G TF小卡 class 10 卡一张。(入门可选,个人感觉16G的性价比更高)</li>
<li>网线一条</li>
<li>5V 2A的电源,一定要2A，一般手机充电看下是否可用（后续加模块，传感器，保证供电）。</li>
<li>笔记本电脑/或者台式电脑一台。<br><img src="http://shizhidi.qiniudn.com/blog/P60129-122326.png" alt="已装好的树莓派"></li>
</ol>
<h6 id="下载操作系统">下载操作系统</h6><p> 选择官方提供的Raspbian，官方提供的Raspberry Pi专用Debian。打开下载页后，选择Raspbian “wheezy”的Zip下载。<br><a href="http://www.raspberrypi.org/downloads" target="_blank" rel="external">下载页面</a><br>解压后，我们得到一个.img文件 </p>
<h6 id="烧写系统">烧写系统</h6><p> 你的SD卡通过读卡器插进电脑里，使用Win32DiskImager把系统写进卡里面。打开Win32DiskImager，选择.img文件，选择SD卡，点Write。非常简单<br><a href="http://pan.baidu.com/s/1nuNvX6D" target="_blank" rel="external">Win32DiskImage下载页面</a></p>
<h6 id="登录树莓派系统">登录树莓派系统</h6><p> 把卡插到树莓派上面,并且网线插上(一端接路由)，电源插好通电。等待20多秒，系统就启动好了。<br>通过ssh登录到树莓派,首先获取IP。<a href="http://pan.baidu.com/s/1jHV9A4I" target="_blank" rel="external">网段扫描工具</a><br>把对应RaspberryPi 的机器的IP地址记录下来。<br>打开PUTTY<br><img src="http://shizhidi.qiniudn.com/blog/putty.png" alt="putty"><br>用户:pi 密码:raspberry (默认账户密码)</p>
<h6 id="登录成功配置PI">登录成功配置PI</h6><p> <code>sudo raspi-config</code><br> 出现配置界面,选择expand filesystem 把整个系统的可用空间扩展到储存卡的大小,之后提示重新启动。</p>
<h3 id="远程桌面树莓派">远程桌面树莓派</h3><p> 还是打开PUTTY通过ssh链接,安装一个服务xdrp即可<br> <code>输入如下命令安装：sudo apt-get install xrdp</code><br> 安装完成打开电脑的远程桌面,输入IP,用户名-密码同上。</p>
<hr>
<h2 id="安装_hexo_静态博客">安装 hexo 静态博客</h2><ol>
<li>安装nodejs的arm环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://nodejs.org/dist/v0.<span class="number">10.26</span>/node-v0.<span class="number">10.26</span>-linux-arm-pi.tar.gz</span><br><span class="line">sudo tar zxvf node-v0.<span class="number">10.26</span>-linux-arm-pi.tar.gz </span><br><span class="line">sudo mv node-v0.<span class="number">10.26</span>-linux-arm-pi/ node</span><br><span class="line">sudo mv node /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo chown -R pi.pi /usr/<span class="built_in">local</span>/node</span><br></pre></td></tr></table></figure>
<ol>
<li><p>解锁root账户<br>在命令行下执行<br><code>sudo passwd root</code><br>执行此命令后系统会提示输入两遍的root密码，输入你想设的密码即可，然后在执行<br><code>sudo passwd --unlock root</code><br>这样就可以解锁root账户了。</p>
</li>
<li><p>配置环境变量</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"PATH=$PATH:/usr/local/node/bin"</span> &gt;&gt; /etc/<span class="keyword">profile</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export PATH"</span> &gt;&gt; /etc/<span class="keyword">profile</span></span><br><span class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span></span><br><span class="line">node -<span class="keyword">v</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装HEXO</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">hexo <span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>
<p>后面写博客维护，主题 插件之类，就自己去hexo 看官方文档API。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解了如何在Raspberry pie上搭建hexo博客。]]>
    
    </summary>
    
      <category term="Raspberry pie" scheme="/tags/Raspberry-pie/"/>
    
      <category term="OpenSourceHardware" scheme="/categories/OpenSourceHardware/"/>
    
  </entry>
  
</feed>