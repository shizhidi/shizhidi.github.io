<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[shizhidi's blog]]></title>
  <subtitle><![CDATA[just do it!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="//"/>
  <updated>2016-07-15T15:25:37.709Z</updated>
  <id>//</id>
  
  <author>
    <name><![CDATA[Edison]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[GUI自动化测试]]></title>
    <link href="/2016/07/15/Testautomation/"/>
    <id>/2016/07/15/Testautomation/</id>
    <published>2016-07-14T23:47:38.000Z</published>
    <updated>2016-07-15T15:25:37.709Z</updated>
    <content type="html"><![CDATA[<h4 id="GUI自动化测试环境搭建(包含范例)">GUI自动化测试环境搭建(包含范例)</h4><p><strong>环境搭建</strong><br><a href="http://ftopia.cn/2016/06/20/Selenium%20+%20Python%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" target="_blank" rel="external">网上教程</a></p>
<p><strong>注意几点：</strong></p>
<p>1.下载Python 2.x版本。<br>2.下载chrome的测试驱动，并放到chrome的安装目录中。<br>3.在Path中配置chrome的path路径<br>4.<a href="http://pan.baidu.com/s/1mh9ocsw" target="_blank" rel="external">selenium2 python自动化测试pdf</a><br>5.看下第三章pythonwebdriverAPI 快速上手、网上看下Python基础。</p>
<p><strong>登陆模块测试用例</strong><br>1.测试登陆页、首页是否正常登陆。<br>2.输入用户名、密码正常跳转index页。<br>3.查看是否为index页。<br>4.正常退出index页。</p>
<h4 id="登录测试用例">登录测试用例</h4><table cellspacing="0" cellpadding="0" border="1" style="color:rgb(0,0,0)"><tbody><tr><td valign="top" width="200" colspan="2"><span style="font-size:16px">用例ID</span></td><td valign="top" width="200"><span style="font-size:16px">XXXX-XX-XX</span></td><td valign="top" width="275" colspan="2"><span style="font-size:16px">用例名称</span></td><td valign="top" width="169" colspan="3"><span style="font-size:16px">系统登录</span></td></tr><tr><td valign="top" width="70" colspan="2"><span style="font-size:16px">用例描述</span></td><td valign="top" width="526" colspan="6"><span style="font-size:16px">系统登录</span><span style="font-size:16px">用户名存在、密码正确的情况下，进入系统</span><span style="font-size:16px">页面信息包含：页面背景显示</span><span style="font-size:16px">用户名和密码录入接口，输入数据后的登入系统接口</span></td></tr><tr><td valign="top" width="70" colspan="2"><span style="font-size:16px">用例入口</span></td><td valign="top" width="526" colspan="6"><span style="font-size:16px">打开IE，在地址栏输入相应地址</span><span style="font-size:16px">进入该系统登录页面</span></td></tr><tr><td valign="top" width="596" colspan="8"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td><strong><span style="font-size:16px">测试用例ID</span></strong></td><td width="129" colspan="3"><strong><span style="font-size:16px">场景</span></strong></td><td width="252" colspan="2"><strong><span style="font-size:16px">测试步骤</span></strong></td><td><strong><span style="font-size:16px">预期结果</span></strong></td><td><strong><span style="font-size:16px">备注</span></strong></td></tr><tr><td valign="top"><span style="font-size:16px">TC1</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">初始页面显示</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">从用例入口处进入</span></td><td valign="top"><span style="font-size:16px">页面元素完整，显示与详细设计一致</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC2</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">用户名录入－验证</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入已存在的用户：<a href="http://www.51testing.com/?uid-131542-action-viewspace-itemid-19547" target="_self" style="color:rgb(102,102,102)"><u><strong>test</strong></u></a></span></td><td valign="top"><span style="font-size:16px">输入成功</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC3</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">用户名－容错性验证</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入：aaaaabbbbbcccccdddddeeeee</span></td><td valign="top"><span style="font-size:16px">输入到蓝色显示的字符时，系统拒绝输入</span></td><td valign="top"><span style="font-size:16px">输入数据超过规定长度范围</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC4</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">密码－密码录入</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入与用户名相关联的数据：test</span></td><td valign="top"><span style="font-size:16px">输入成功</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC5</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录－成功</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">TC2，TC4，单击登录按钮</span></td><td valign="top"><span style="font-size:16px">登录系统成功</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC6</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录－用户名、密码校验</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">没有输入用户名、密码，单击登录按钮</span></td><td valign="top"><span style="font-size:16px">系统登录失败，并提示：请检查用户名和密码的输入是否正确</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC7</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录－密码校验</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入用户名，没有输入密码，单击登录按钮</span></td><td valign="top"><span style="font-size:16px">系统登录失败，并提示：需要输入密码</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC8</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录－密码有效性校验</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入用户名，输入密码与用户名不一致，单击登录按钮</span></td><td valign="top"><span style="font-size:16px">系统登录失败，并提示：错误的密码</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC9</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录－输入有效性校验</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">输入不存在的用户名、密码，单击登录按钮</span></td><td valign="top"><span style="font-size:16px">系统登录失败，并提示：用户名不存在</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr><tr><td valign="top"><span style="font-size:16px">TC10</span></td><td valign="top" width="129" colspan="3"><span style="font-size:16px">系统登录—安全校验</span></td><td valign="top" width="252" colspan="2"><span style="font-size:16px">连续3次未成功</span></td><td valign="top"><span style="font-size:16px">系统提示：您没有使用该系统的权限，请与管理员联系！</span></td><td valign="top"><span style="font-size:16px">&nbsp;</span></td></tr></tbody></table>

<h4 id="Python测试代码">Python测试代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 浏览器最大化显示</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.get(<span class="string">'http://localhost/MS6000/html5/index.html'</span>)</span><br><span class="line"></span><br><span class="line">codes = browser.find_element_by_id(<span class="string">"vCode1"</span>).find_elements_by_tag_name(<span class="string">"span"</span>);</span><br><span class="line">codeVal = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> codes:</span><br><span class="line">	codeVal = codeVal + code.text</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"name"</span>).send_keys(<span class="string">"admin"</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"pass"</span>).send_keys(<span class="string">"admin_s"</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"loginbtn"</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element_by_class_name(<span class="string">"panel-tool-close"</span>).click()</span><br><span class="line"><span class="keyword">print</span> <span class="string">u'无验证码：提示正确!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置按钮</span></span><br><span class="line">browser.find_element_by_id(<span class="string">"resetbtn"</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"name"</span>).send_keys(<span class="string">"admin123"</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"pass"</span>).send_keys(<span class="string">"admin_sss"</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"code1"</span>).send_keys(codeVal)</span><br><span class="line">browser.find_element_by_id(<span class="string">"loginbtn"</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element_by_class_name(<span class="string">"panel-tool-close"</span>).click()</span><br><span class="line"><span class="keyword">print</span> <span class="string">u'用户名密码错误：提示正确!'</span></span><br><span class="line">browser.find_element_by_id(<span class="string">"resetbtn"</span>).click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">"name"</span>).send_keys(<span class="string">"admin"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4><p>对于小公司来说,用处不大。前端需求更新快，但相对来说还是有好处的，写一遍，回归测试。保证以前的功能正确。比对页面的差异性。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-GUI的自动化测试]]>
    
    </summary>
    
      <category term="自动化测试" scheme="/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试" scheme="/categories/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript排序和搜索算法]]></title>
    <link href="/2016/07/14/SortingAlgorithm/"/>
    <id>/2016/07/14/SortingAlgorithm/</id>
    <published>2016-07-14T14:25:26.000Z</published>
    <updated>2016-07-14T15:02:58.855Z</updated>
    <content type="html"><![CDATA[<h4 id="排序和搜索算法">排序和搜索算法</h4><p>假设我们有一个没有任何排列顺序的电话号码表。当需要添加联络人和电话时，只能添加到下一个空位上。如果你的联系表上有很多人，你要找某个联系人及电话号码。但是由于联系人没有按照任何顺序来组织，你就逐个检查。想想就恐怖，不知道花多久时间。所以，就需要组织信息集。</p>
<h4 id="排序算法">排序算法</h4><p>创建一个数组(列表)来表示待排序和搜索的数据结构。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> array = [];</span><br><span class="line">	<span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		array.push(item);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//拼接数组中的所有元素为字符串在控制台中方便查看。</span></span><br><span class="line">	<span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> array.join();</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNonSortedArray</span>(<span class="params">size</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = size; i&gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        array.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.<strong>冒泡排序</strong><br>冒泡排序比较任何两个相邻的项，如果第一个比第二个大，则交互它们。元素项向上移动至正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swap = <span class="function"><span class="keyword">function</span>(<span class="params">index1, index2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aux = array[index1];</span><br><span class="line">    array[index1] = array[index2];</span><br><span class="line">    array[index2] = aux;</span><br><span class="line">&#125;;</span><br><span class="line">ArrayList.prototype.bubbleSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'--- '</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;length-<span class="number">1</span>; j++ )&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'compare '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">                swap(j, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试冒泡算法</span></span><br><span class="line"><span class="keyword">var</span> array = createNonSortedArray(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"></span><br><span class="line">array.bubbleSort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure></p>
<p>2.<strong>选择排序</strong><br>选择排序算法是一种原址比较排序算法。选择排序算法大致的思路是找到数据结构中的最小值并将其放置在第一位，接着找到第二个小的值并将其放在第二位，以此类推。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.selectionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">        indexMin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        indexMin = i;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'index '</span> + array[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=i; j&lt;length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[indexMin]&gt;array[j])&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'new index min '</span> + array[j]);</span><br><span class="line">                indexMin = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i !== indexMin)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[i] + <span class="string">' with '</span> + array[indexMin]);</span><br><span class="line">            swap(i, indexMin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">array = createNonSortedArray(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"></span><br><span class="line">array.selectionSort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure></p>
<p>3.<strong>插入排序</strong><br>插入排序每次排一个数组项，以此方式构建最后的排序数组。假定第一项已经排序了，接着，它和第二项进行比较，第二项是应该待在原位还是插到第一项之前呢？这样，头两项就已经正确排序，接着和第三项比较(它是该插入到第一、第二还是第三位置呢？)，以此类推。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.insertionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">        j, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;length; i++)&#123;</span><br><span class="line">        j = i;</span><br><span class="line">        temp = array[i];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'to be inserted '</span> + temp);</span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; array[j-<span class="number">1</span>] &gt; temp)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'shift '</span> + array[j-<span class="number">1</span>]);</span><br><span class="line">            array[j] = array[j-<span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'insert '</span> + temp);</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">array = createRandomNonSortedArray();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"></span><br><span class="line">array.insertionSort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure></p>
<p>4.<strong>归并排序</strong><br>归并排序是一种分治算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.mergeSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    array = mergeSortRec(array);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mergeSortRec = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(array);</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>),</span><br><span class="line">        left = array.slice(<span class="number">0</span>, mid),</span><br><span class="line">        right = array.slice(mid, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(mergeSortRec(left), mergeSortRec(right));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],</span><br><span class="line">        il = <span class="number">0</span>,</span><br><span class="line">        ir = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left[il] &lt; right[ir]) &#123;</span><br><span class="line">            result.push(left[il++]);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            result.push(right[ir++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (il &lt; left.length)&#123;</span><br><span class="line">        result.push(left[il++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ir &lt; right.length)&#123;</span><br><span class="line">        result.push(right[ir++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">array = createNonSortedArray(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"></span><br><span class="line">array.mergeSort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure></p>
<p>5.<strong>快速排序</strong><br>快速排序也许是最常用的排序算法了。且它的性能通常比其他的排序算法要好。和归并排序一样，快速排序也使用分治的方法，将原始数组分为较小的数组(但它没有像归并排序那样将它们分割开)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.quickSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    quick(array,  <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//划分过程</span></span><br><span class="line"><span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)],</span><br><span class="line">        i = left,</span><br><span class="line">        j = right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'pivot is '</span> + pivot + <span class="string">'; left is '</span> + left + <span class="string">'; right is '</span> + right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'i = '</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (array[j] &gt; pivot) &#123;</span><br><span class="line">            j--;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'j = '</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[i] + <span class="string">' with '</span> + array[j]);</span><br><span class="line">            swapQuickStort(array, i, j);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swapQuickStort = <span class="function"><span class="keyword">function</span>(<span class="params">array, index1, index2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aux = array[index1];</span><br><span class="line">    array[index1] = array[index2];</span><br><span class="line">    array[index2] = aux;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> quick = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        index = partition(array, left, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">            quick(array, left, index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">            quick(array, index, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">array = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">array.insert(<span class="number">3</span>);</span><br><span class="line">array.insert(<span class="number">5</span>);</span><br><span class="line">array.insert(<span class="number">1</span>);</span><br><span class="line">array.insert(<span class="number">6</span>);</span><br><span class="line">array.insert(<span class="number">4</span>);</span><br><span class="line">array.insert(<span class="number">7</span>);</span><br><span class="line">array.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"></span><br><span class="line">array.quickSort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure></p>
<h4 id="搜索算法">搜索算法</h4><p>1.<strong>顺序搜索</strong><br>顺序或线性搜索是最基本的搜索算法。它的机制是，将每一个数据结构中的元素和我们要找的元素做比较。顺序搜索是最低效的一种搜索算法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">ArrayList.prototype.sequentialSearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (item === array[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ArrayList.prototype.findMaxValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; array[i])&#123;</span><br><span class="line">            max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ArrayList.prototype.findMinValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> min = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (min &gt; array[i])&#123;</span><br><span class="line">            min = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = createNonSortedArray(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'********** Sequential Sort #3 **********'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.sequentialSearch(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'********** Min **********'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.findMinValue());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'********** Max **********'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.findMaxValue());</span><br></pre></td></tr></table></figure></p>
<p>2.<strong>二分搜索</strong><br>二分搜索算法的原理和猜数字游戏类似，就是那个有人说“我正想着一个1到100的数字”的游戏。我们每回应 一个数字，那人就会说高了，还是低了。<br>这个算法要求被搜索的数据已排序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ArrayList.prototype.binarySearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.quickSort();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">        high = array.length - <span class="number">1</span>,</span><br><span class="line">        mid, element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">        mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</span><br><span class="line">        element = array[mid];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'mid element is '</span> + element);</span><br><span class="line">        <span class="keyword">if</span> (element &lt; item) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'low is '</span> + low);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; item) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'high is '</span> + high);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'found it'</span>);</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'********** Binary Search #3 **********'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.binarySearch(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'********** Binary Search #2 **********'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = createNonSortedArray(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.binarySearch(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中排序和算法。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：字典和散列表]]></title>
    <link href="/2016/07/12/dataStructureOfDictionary/"/>
    <id>/2016/07/12/dataStructureOfDictionary/</id>
    <published>2016-07-12T13:54:51.000Z</published>
    <updated>2016-07-12T15:16:03.365Z</updated>
    <content type="html"><![CDATA[<h4 id="字典">字典</h4><p>集合、字典和散列表可以存储不重复的值。在集合中，以[值，值]的形式存储元素，字典中，用[键，值]的形式来存储数据，在散列中也是一样[键，值]，字典和散列表数据结构的实现方式有所不同。</p>
<h4 id="创建一个Dictionary类">创建一个Dictionary类</h4><p>与Set类相似，ECMAScript 6同样包含了一个Map类的实现，即字典。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">function Dictionary()&#123;</span><br><span class="line"></span><br><span class="line">    var items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    this.set = function(key, value)&#123;</span><br><span class="line">        items[key] = value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.delete = function(key)&#123;</span><br><span class="line">        if (this.has(key))&#123;</span><br><span class="line">            delete items[key];</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.has = function(key)&#123;</span><br><span class="line">        return items.hasOwnProperty(key);</span><br><span class="line">        //return value in items;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.get = function(key) &#123;</span><br><span class="line">        return this.has(key) ? items[key] : undefined;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.clear = function()&#123;</span><br><span class="line">        items = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.size = function()&#123;</span><br><span class="line">        return Object.keys(items).length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.keys = function()&#123;</span><br><span class="line">        return Object.keys(items);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.values = function()&#123;</span><br><span class="line">        var values = [];</span><br><span class="line">        for (var k in items) &#123;</span><br><span class="line">            if (this.has(k)) &#123;</span><br><span class="line">                values.push(items[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.each = function(fn) &#123;</span><br><span class="line">        for (var k in items) &#123;</span><br><span class="line">            if (this.has(k)) &#123;</span><br><span class="line">                fn(k, items[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    this.getItems = function()&#123;</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dictionary = new Dictionary();</span><br><span class="line"></span><br><span class="line">dictionary.set('Gandalf', 'gandalf@email.com');</span><br><span class="line">dictionary.set('John', 'johnsnow@email.com');</span><br><span class="line">dictionary.set('Tyrion', 'tyrion@email.com');</span><br><span class="line"></span><br><span class="line">console.log(dictionary.has('Gandalf'));   //outputs true</span><br><span class="line">console.log(dictionary.size());   //outputs 3</span><br><span class="line"></span><br><span class="line">console.log(dictionary.keys()); //outputs ["Gandalf", "John", "Tyrion"]</span><br><span class="line">console.log(dictionary.values()); //outputs ["gandalf@email.com", "johnsnow@email.com", "tyrion@email.com"]</span><br><span class="line">console.log(dictionary.get('Tyrion')); //outputs tyrion@email.com</span><br><span class="line"></span><br><span class="line">dictionary.delete(‘John');</span><br><span class="line"></span><br><span class="line">console.log(dictionary.keys()); //outputs ["Gandalf", "Tyrion"]</span><br><span class="line">console.log(dictionary.values()); //outputs ["gandalf@email.com", "tyrion@email.com"]</span><br><span class="line"></span><br><span class="line">console.log(dictionary.getItems()); //Object &#123;Gandalf: "gandalf@email.com", Tyrion: "tyrion@email.com"&#125;</span><br></pre></td></tr></table></figure>
<h4 id="散列表">散列表</h4><p>在字典中要获取一个值，要遍历整个数据结构来找到它，而散列是通过散列函数转换key为地址，作为键来存储。最后get是获取地址。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> djb2HashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">5381</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash = hash * <span class="number">33</span> + key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">1013</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loseloseHashCode(key);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line">        <span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line">        table[position] = value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> table[hashCode(key)];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        table[hashCode(key)] = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; table.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i + <span class="string">": "</span> + table[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = <span class="keyword">new</span> HashTable();</span><br><span class="line"></span><br><span class="line">hash.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Aaron'</span>, <span class="string">'aaron@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Donnie'</span>, <span class="string">'donnie@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Ana'</span>, <span class="string">'ana@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Jonathan'</span>, <span class="string">'jonathan@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Jamie'</span>, <span class="string">'jamie@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Sue'</span>, <span class="string">'sue@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Mindy'</span>, <span class="string">'mindy@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Paul'</span>, <span class="string">'paul@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Nathan'</span>, <span class="string">'nathan@email.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Printing Hash **** '</span>);</span><br><span class="line"></span><br><span class="line">hash.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Get **** '</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Loiane'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Remove **** '</span>);</span><br><span class="line"></span><br><span class="line">hash.remove(<span class="string">'Gandalf'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>));</span><br><span class="line">hash.print();</span><br></pre></td></tr></table></figure></p>
<h4 id="处理散列表中的冲突">处理散列表中的冲突</h4><p>通过散列表转换的地址有相同的key即为冲突，后者会覆盖前者。</p>
<p><strong>分离链接法</strong><br>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTableSeparateChaining</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loseloseHashCode(key);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line">        <span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            table[position] = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        &#125;</span><br><span class="line">        table[position].append(<span class="keyword">new</span> ValuePair(key, value));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>  &amp;&amp; !table[position].isEmpty())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历链表来寻找键/值</span></span><br><span class="line">            <span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.element.key === key)&#123;</span><br><span class="line">                    <span class="keyword">return</span> current.element.value;</span><br><span class="line">                &#125;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125; <span class="keyword">while</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//iterate linked list to find key/value</span></span><br><span class="line">            <span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.element.key === key)&#123;</span><br><span class="line">                    table[position].remove(current.element);</span><br><span class="line">                    <span class="keyword">if</span> (table[position].isEmpty())&#123;</span><br><span class="line">                        table[position] = <span class="literal">undefined</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125; <span class="keyword">while</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; table.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">               <span class="built_in">console</span>.log(table[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hashTableSeparateChaining = <span class="keyword">new</span> HashTableSeparateChaining();</span><br><span class="line"></span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Aaron'</span>, <span class="string">'aaron@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Donnie'</span>, <span class="string">'donnie@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Ana'</span>, <span class="string">'ana@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Jonathan'</span>, <span class="string">'jonathan@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Jamie'</span>, <span class="string">'jamie@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Sue'</span>, <span class="string">'sue@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Mindy'</span>, <span class="string">'mindy@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Paul'</span>, <span class="string">'paul@email.com'</span>);</span><br><span class="line">hashTableSeparateChaining.put(<span class="string">'Nathan'</span>, <span class="string">'nathan@email.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Printing Hash **** '</span>);</span><br><span class="line"></span><br><span class="line">hashTableSeparateChaining.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Get **** '</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.get(<span class="string">'Jamie'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.get(<span class="string">'Sue'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.get(<span class="string">'Jonathan'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.get(<span class="string">'Loiane'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Remove **** '</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.remove(<span class="string">'Gandalf'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.get(<span class="string">'Gandalf'</span>));</span><br><span class="line">hashTableSeparateChaining.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.remove(<span class="string">'Sue'</span>));</span><br><span class="line">hashTableSeparateChaining.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.remove(<span class="string">'Jamie'</span>));</span><br><span class="line">hashTableSeparateChaining.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTableSeparateChaining.remove(<span class="string">'Donnie'</span>));</span><br><span class="line">hashTableSeparateChaining.print();</span><br></pre></td></tr></table></figure></p>
<p><strong>线性探查法</strong><br>当向表中某个位置加入一个新元素的时候，如果索引为index的位置已经被占据了，就尝试index+1的位置。如果index+1的位置也被占据了，就尝试index+2的位置，以此类推。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashLinearProbing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loseloseHashCode(key);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line">        <span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            table[position] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = ++position;</span><br><span class="line">            <span class="keyword">while</span> (table[index] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            table[index] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">                <span class="keyword">return</span> table[position].value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (table[index].key === key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> table[index].value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">                table[position] = <span class="literal">undefined</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (table[index].key === key) &#123;</span><br><span class="line">                    table[index] = <span class="literal">undefined</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; table.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i + <span class="string">' -&gt; '</span> + table[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hashLinearProbing = <span class="keyword">new</span> HashLinearProbing();</span><br><span class="line"></span><br><span class="line">hashLinearProbing.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Aaron'</span>, <span class="string">'aaron@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Donnie'</span>, <span class="string">'donnie@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Ana'</span>, <span class="string">'ana@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Jonathan'</span>, <span class="string">'jonathan@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Jamie'</span>, <span class="string">'jamie@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Sue'</span>, <span class="string">'sue@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Mindy'</span>, <span class="string">'mindy@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Paul'</span>, <span class="string">'paul@email.com'</span>);</span><br><span class="line">hashLinearProbing.put(<span class="string">'Nathan'</span>, <span class="string">'nathan@email.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Printing Hash **** '</span>);</span><br><span class="line"></span><br><span class="line">hashLinearProbing.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Get **** '</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashLinearProbing.get(<span class="string">'Nathan'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(hashLinearProbing.get(<span class="string">'Loiane'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'**** Remove **** '</span>);</span><br><span class="line"></span><br><span class="line">hashLinearProbing.remove(<span class="string">'Gandalf'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hashLinearProbing.get(<span class="string">'Gandalf'</span>));</span><br><span class="line">hashLinearProbing.print();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构字典和散列表。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript命令模式(六)]]></title>
    <link href="/2016/07/12/commandPattern/"/>
    <id>/2016/07/12/commandPattern/</id>
    <published>2016-07-12T12:41:46.000Z</published>
    <updated>2016-07-12T12:42:48.322Z</updated>
    <content type="html"><![CDATA[<h4 id="命令模式">命令模式</h4><p>假设有一个快餐店，而我是该餐厅的点餐服务员，那么我一天的工作应该是这样的：当某位客人点餐或者打来订餐电话后，我会把他的需求都写在清单上，然后交给厨房，客人不用关心是哪些厨师帮他炒菜。餐厅还可以满足客人的需要的定时服务，比如客人可能当前正在回家的路上，要求1个小时候才开始炒他的菜，只要订单还在，厨师就不会忘记。客人也可以打电话来撤销订单。如有太多的客人点餐，厨房可以按照订单的顺序炒菜。<br><strong>这些记录着订餐信息的清单，便是命令模式中的命令对象</strong></p>
<p>命令模式是最简单和优雅的模式之一，命令模式中的命令指的是一个执行某些特定事情的指令。<br>命令模式最常见的应用场景：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>
<h4 id="命令模式例子—菜单程序">命令模式例子—菜单程序</h4><p>假设我们正在编写一个用户界面程序，该用户界面上有数十个按钮。因为项目比较复杂，所以决定让某个程序员负责绘制这些按钮，而另外一些程序员则负责编写点击按钮后的具体行为，这些行为都将被封装在对象里。<br><strong>传统面向对象写法：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById( <span class="string">'button1'</span> ),</span><br><span class="line"> 	button2 = <span class="built_in">document</span>.getElementById( <span class="string">'button2'</span> ),</span><br><span class="line">	button3 = <span class="built_in">document</span>.getElementById( <span class="string">'button3'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, command </span>)</span>&#123;</span><br><span class="line">	button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">	refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'刷新菜单目录'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">	add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'增加子菜单'</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	del: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'删除子菜单'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//在让button 变得有用起来之前，我们要先把这些行为都封装在命令类中：</span></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line">RefreshMenuBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AddSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> DelSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line">DelSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'删除子菜单'</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand( MenuBar );</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand( SubMenu );</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> DelSubMenuCommand( SubMenu );</span><br><span class="line">setCommand( button1, refreshMenuBarCommand );</span><br><span class="line">setCommand( button2, addSubMenuCommand );</span><br><span class="line">setCommand( button3, delSubMenuCommand );</span><br></pre></td></tr></table></figure></p>
<p><strong>javaScript中的命令模式</strong><br>javaScript作为将函数作为一等对象的语言，更策略模式一样，命令模式也早已融入到了javaScript语言之中。运算块不一定要封装在command.execute方法中，也可以封装在普通函数中。函数作为一等对象，本身就可以被四处传递。即使我们依然需要请求“接收者”，闭包可以完成同样的功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, func </span>)</span>&#123;</span><br><span class="line">	button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		func();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">	refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'刷新菜单界面'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		receiver.refresh();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommand( MenuBar );</span><br><span class="line">setCommand( button1, refreshMenuBarCommand );</span><br><span class="line"></span><br><span class="line"><span class="comment">//将来有可能还要提供撤销命令，所以把执行函数改为调用exexute方法</span></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			receiver.refresh();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, command </span>)</span>&#123;</span><br><span class="line">	button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommand( MenuBar );</span><br><span class="line">setCommand( button1, refreshMenuBarCommand );</span><br></pre></td></tr></table></figure></p>
<h4 id="撤销和重做">撤销和重做</h4><p>很多时候需要撤销一系列的命令。比如在一个围棋程序中，已经下了10步棋，我们需要一次性悔棋到第5步。在这之前我们可以把所以执行过的下棋命令都储存在一个历史列表中，然后倒序循环来依次执行这些命令的undo操作。<br>命令模式可以用来实现播放录像功能。把用户在键盘的输入都封装成命令，执行过的命令将被存放到堆栈中，播放录像的时候只需要从头开始依次执行这些命令。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Ryu = &#123;</span><br><span class="line">	attack: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'攻击'</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	defense: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'防御'</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'跳跃'</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	crouch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'蹲下'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> makeCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver, state </span>)</span>&#123; <span class="comment">// 创建命令</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		receiver[ state ]();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> commands = &#123;</span><br><span class="line">	<span class="string">"119"</span>: <span class="string">"jump"</span>, <span class="comment">// W</span></span><br><span class="line">	<span class="string">"115"</span>: <span class="string">"crouch"</span>, <span class="comment">// S</span></span><br><span class="line">	<span class="string">"97"</span>: <span class="string">"defense"</span>, <span class="comment">// A</span></span><br><span class="line">	<span class="string">"100"</span>: <span class="string">"attack"</span> <span class="comment">// D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandStack = []; <span class="comment">// 保存命令的堆栈</span></span><br><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params"> ev </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> keyCode = ev.keyCode,</span><br><span class="line">	command = makeCommand( Ryu, commands[ keyCode ] );</span><br><span class="line">	<span class="keyword">if</span> ( command )&#123;</span><br><span class="line">		command(); <span class="comment">// 执行命令</span></span><br><span class="line">		commandStack.push( command ); <span class="comment">// 将刚刚执行过的命令保存进堆栈</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'replay'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 点击播放录像</span></span><br><span class="line">	<span class="keyword">var</span> command;</span><br><span class="line">	<span class="keyword">while</span>( command = commandStack.shift() )&#123; <span class="comment">// 从堆栈里依次取出命令并执行</span></span><br><span class="line">		command();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="宏命令">宏命令</h4><p>宏命令是一组命令的集合，通过执行命令的方式，可以一次执行一批命令。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">	execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'关门'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> openPcCommand = &#123;</span><br><span class="line">	execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'开电脑'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">	execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'登录QQ'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		commandsList: [],</span><br><span class="line">		add: <span class="function"><span class="keyword">function</span>(<span class="params"> command </span>)</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.commandsList.push( command );</span><br><span class="line">		&#125;,</span><br><span class="line">		execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, command; command = <span class="keyword">this</span>.commandsList[ i++ ]; )&#123;</span><br><span class="line">				command.execute();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add( closeDoorCommand );</span><br><span class="line">macroCommand.add( openPcCommand );</span><br><span class="line">macroCommand.add( openQQCommand );</span><br><span class="line">macroCommand.execute();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的命令模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript发布-订阅模式(五)]]></title>
    <link href="/2016/07/09/publishSubscribePattern/"/>
    <id>/2016/07/09/publishSubscribePattern/</id>
    <published>2016-07-09T03:36:12.000Z</published>
    <updated>2016-07-09T03:42:32.991Z</updated>
    <content type="html"><![CDATA[<h4 id="发布-订阅模式(观察者模式)">发布-订阅模式(观察者模式)</h4><p>它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在JavaScript开发中，一般用事件模型来替代传统的发布-订阅模式。</p>
<p>举个生活中的栗子：小明、小红去售楼处看房子，但被告知该楼盘早已卖完。好在后面还有一些尾盘推出，但到底什么时候可以购买，目前还没有人能够知道。售楼处让小明，小红等等人把电话号码留下，新楼盘一推出就马上发信息给他们。</p>
<p>这就是一个典型的发布-订阅模式，小明、小红等购买者都是订阅者，他们订阅了房子开售消息，售楼处作为发布者。</p>
<p><strong>DOM事件</strong><br>只要我们曾经在DOM节点上面绑定过事件函数，那我们就曾经使用过发布-订阅模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订阅</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击</span></span><br></pre></td></tr></table></figure></p>
<p><strong>发布-订阅模式的通用实现</strong><br>下面实现售楼处的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果小明等人去另一个售楼处买房子，售楼处的代码又得重写</span></span><br><span class="line"><span class="comment">//所以我们把发布—订阅的功能提取出来，放在一个单独的对象内：让所以对象都拥有发布-订阅功能</span></span><br><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">clientList: [],</span><br><span class="line">listen: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( !<span class="keyword">this</span>.clientList[ key ] )&#123;</span><br><span class="line">		<span class="keyword">this</span>.clientList[ key ] = [];</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">this</span>.clientList[ key ].push( fn ); <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">	&#125;,</span><br><span class="line">	trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ), <span class="comment">// (1);</span></span><br><span class="line">		fns = <span class="keyword">this</span>.clientList[ key ];</span><br><span class="line">		<span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> )&#123; <span class="comment">// 如果没有绑定对应的消息</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; )&#123;</span><br><span class="line">			fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); <span class="comment">// (2) // arguments 是trigger 时带上的参数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> event )&#123;</span><br><span class="line">		obj[ i ] = event[ i ];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//再来测试一番，我们给售楼处对象salesOffices 动态增加发布—订阅功能：</span></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">installEvent( salesOffices );</span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小明订阅消息</span></span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price );</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price );</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> ); <span class="comment">// 输出：2000000</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter100'</span>, <span class="number">3000000</span> ); <span class="comment">// 输出：3000000</span></span><br></pre></td></tr></table></figure></p>
<p><strong>全局的发布-订阅对象</strong><br>这里还存在两个问题：</p>
<ul>
<li>给每个发布者对象都添加listen和trigger方法，以及一个缓存列表clientList，是一种资源浪费。</li>
<li>小明跟售楼处对象还是存在一定的耦合性，小明至少要知道售楼处对象的名字是salesOffices，才能顺利的订阅到事件。</li>
</ul>
<p>有时候买房子未必要到售楼处，只要把订阅的请求交给中介公司，而各大房产公司也只需要通过中介公司来发布房子信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">	listen,</span><br><span class="line">	trigger,</span><br><span class="line">	remove;</span><br><span class="line">	listen = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( !clientList[ key ] )&#123;</span><br><span class="line">			clientList[ key ] = [];</span><br><span class="line">		&#125;</span><br><span class="line">		clientList[ key ].push( fn );</span><br><span class="line">	&#125;;</span><br><span class="line">	trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ),</span><br><span class="line">		fns = clientList[ key ];</span><br><span class="line">		<span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> )&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; )&#123;</span><br><span class="line">			fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	remove = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> fns = clientList[ key ];</span><br><span class="line">		<span class="keyword">if</span> ( !fns )&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ( !fn )&#123;</span><br><span class="line">			fns &amp;&amp; ( fns.length = <span class="number">0</span> );</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;=<span class="number">0</span>; l-- )&#123;</span><br><span class="line">				<span class="keyword">var</span> _fn = fns[ l ];</span><br><span class="line">				<span class="keyword">if</span> ( _fn === fn )&#123;</span><br><span class="line">					fns.splice( l, <span class="number">1</span> );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		listen: listen,</span><br><span class="line">		trigger: trigger,</span><br><span class="line">		remove: remove</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Event.listen( <span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price ); <span class="comment">// 输出：'价格=2000000'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> ); <span class="comment">// 售楼处发布消息</span></span><br></pre></td></tr></table></figure></p>
<h4 id="模块间通信">模块间通信</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById( <span class="string">'count'</span> );</span><br><span class="line">	button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		Event.trigger( <span class="string">'add'</span>, count++ );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById( <span class="string">'show'</span> );</span><br><span class="line">	Event.listen( <span class="string">'add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> count </span>)</span>&#123;</span><br><span class="line">		div.innerHTML = count;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>这里要留意另一个问题，模块之间如果用了太多的全局发布-订阅模式来通信，那么模块与模块之间的联系就被隐藏到了北海。最终会搞不清楚消息来自哪个模块，消息会流向哪些模块。</p>
<h4 id="全局事件的命名冲突">全局事件的命名冲突</h4><p>全局的发布-订阅对象里只有一个clinetList来存放消息名和回调函数，大家都通过它来订阅和发布各种消息，久而久之，难免会出现事件名冲突的情况，所以给Event对象提供创建命名空间的功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> global = <span class="keyword">this</span>,</span><br><span class="line">	Event,</span><br><span class="line">	_default = <span class="string">'default'</span>;</span><br><span class="line">	Event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> _listen,</span><br><span class="line">		_trigger,</span><br><span class="line">		_remove,</span><br><span class="line">		_slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">		_shift = <span class="built_in">Array</span>.prototype.shift,</span><br><span class="line">		_unshift = <span class="built_in">Array</span>.prototype.unshift,</span><br><span class="line">		namespaceCache = &#123;&#125;,</span><br><span class="line">		_create,</span><br><span class="line">		find,</span><br><span class="line">		each = <span class="function"><span class="keyword">function</span>(<span class="params"> ary, fn </span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> ret;</span><br><span class="line">			<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++ )&#123;</span><br><span class="line">				<span class="keyword">var</span> n = ary[i];</span><br><span class="line">				ret = fn.call( n, i, n);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		&#125;;</span><br><span class="line">		_listen = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn, cache </span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> ( !cache[ key ] )&#123;</span><br><span class="line">				cache[ key ] = [];</span><br><span class="line">			&#125;</span><br><span class="line">			cache[key].push( fn );</span><br><span class="line">		&#125;;</span><br><span class="line">		_remove = <span class="function"><span class="keyword">function</span>(<span class="params"> key, cache ,fn</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> ( cache[ key ] )&#123;</span><br><span class="line">				<span class="keyword">if</span>( fn )&#123;</span><br><span class="line">					<span class="keyword">for</span>( <span class="keyword">var</span> i = cache[ key ].length; i &gt;= <span class="number">0</span>; i-- )&#123;</span><br><span class="line">						<span class="keyword">if</span>( cache[ key ] === fn )&#123;</span><br><span class="line">							cache[ key ].splice( i, <span class="number">1</span> );</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					cache[ key ] = [];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		_trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> cache = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">			key = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">			args = <span class="built_in">arguments</span>,</span><br><span class="line">			_self = <span class="keyword">this</span>,</span><br><span class="line">			ret,</span><br><span class="line">			stack = cache[ key ];</span><br><span class="line">			<span class="keyword">if</span> ( !stack || !stack.length )&#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> each( stack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.apply( _self, args );</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;;</span><br><span class="line">		_create = <span class="function"><span class="keyword">function</span>(<span class="params"> namespace </span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> namespace = namespace || _default;</span><br><span class="line">			<span class="keyword">var</span> cache = &#123;&#125;,</span><br><span class="line">			offlineStack = [], <span class="comment">// 离线事件</span></span><br><span class="line">			ret = &#123;</span><br><span class="line">				listen: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn, last </span>)</span>&#123;</span><br><span class="line">					_listen( key, fn, cache );</span><br><span class="line">					<span class="keyword">if</span> ( offlineStack === <span class="literal">null</span> )&#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> ( last === <span class="string">'last'</span> )&#123;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						each( offlineStack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">							<span class="keyword">this</span>();</span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;</span><br><span class="line">					offlineStack = <span class="literal">null</span>;</span><br><span class="line">				&#125;,</span><br><span class="line">				one: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn, last </span>)</span>&#123;</span><br><span class="line">					_remove( key, cache );</span><br><span class="line">					<span class="keyword">this</span>.listen( key, fn ,last );</span><br><span class="line">				&#125;,</span><br><span class="line">				remove: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>)</span>&#123;</span><br><span class="line">					_remove( key, cache ,fn);</span><br><span class="line">				&#125;,</span><br><span class="line">				trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					<span class="keyword">var</span> fn,</span><br><span class="line">					args,</span><br><span class="line">					_self = <span class="keyword">this</span>;</span><br><span class="line">					_unshift.call( <span class="built_in">arguments</span>, cache );</span><br><span class="line">					args = <span class="built_in">arguments</span>;</span><br><span class="line">					fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">						<span class="keyword">return</span> _trigger.apply( _self, args );</span><br><span class="line">					&#125;;</span><br><span class="line">					<span class="keyword">if</span> ( offlineStack )&#123;</span><br><span class="line">						<span class="keyword">return</span> offlineStack.push( fn );</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> fn();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">return</span> namespace ?</span><br><span class="line">			( namespaceCache[ namespace ] ? namespaceCache[ namespace ] :</span><br><span class="line">				namespaceCache[ namespace ] = ret )</span><br><span class="line">			: ret;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			create: _create,</span><br><span class="line">			one: <span class="function"><span class="keyword">function</span>(<span class="params"> key,fn, last </span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> event = <span class="keyword">this</span>.create( );</span><br><span class="line">				event.one( key,fn,last );</span><br><span class="line">			&#125;,</span><br><span class="line">			remove: <span class="function"><span class="keyword">function</span>(<span class="params"> key,fn </span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> event = <span class="keyword">this</span>.create( );</span><br><span class="line">				event.remove( key,fn );</span><br><span class="line">			&#125;,</span><br><span class="line">			listen: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn, last </span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> event = <span class="keyword">this</span>.create( );</span><br><span class="line">				event.listen( key, fn, last );</span><br><span class="line">			&#125;,</span><br><span class="line">			trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> event = <span class="keyword">this</span>.create( );</span><br><span class="line">				event.trigger.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;();</span><br><span class="line">	<span class="keyword">return</span> Event;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的发布-订阅模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript迭代器模式(四)]]></title>
    <link href="/2016/07/09/iteratorPattern/"/>
    <id>/2016/07/09/iteratorPattern/</id>
    <published>2016-07-09T02:05:40.000Z</published>
    <updated>2016-07-09T02:19:15.151Z</updated>
    <content type="html"><![CDATA[<h4 id="迭代器模式">迭代器模式</h4><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心内部构造，也可以顺序访问其中的每个元素。</p>
<p><strong>内部迭代器：函数内部已经定义好了迭代规则，外部只需一次初始调用</strong></p>
<ol>
<li><p>jquery中的迭代器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each( [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params"> i, n </span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'当前下标为： '</span>+ i );</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'当前值为:'</span> + n );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>自己实现迭代器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params"> ary, callback </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++ )&#123;</span><br><span class="line">		callback.call( ary[i], i, ary[ i ] ); <span class="comment">// 把下标和元素当作参数传给callback 函数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">each( [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ], <span class="function"><span class="keyword">function</span>(<span class="params"> i, n </span>)</span>&#123;</span><br><span class="line">	alert ( [ i, n ] );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当需要判断两个数组是否相等就需要改写</span></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params"> ary1, ary2 </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( ary1.length !== ary2.length )&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> ( <span class="string">'ary1 和ary2 不相等'</span> );</span><br><span class="line">	&#125;</span><br><span class="line">	each( ary1, <span class="function"><span class="keyword">function</span>(<span class="params"> i, n </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( n !== ary2[ i ] )&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> ( <span class="string">'ary1 和ary2 不相等'</span> );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	alert ( <span class="string">'ary1 和ary2 相等'</span> );</span><br><span class="line">&#125;;</span><br><span class="line">compare( [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ], [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span> ] ); <span class="comment">// throw new Error ( 'ary1 和ary2 不相等' );</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>外部迭代器</strong><br>外部迭代器显示地请求迭代下一个元素，外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，可以手工控制迭代的过程或者顺序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		current += <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> current &gt;= obj.length;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> obj[ current ];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		next: next,</span><br><span class="line">		isDone: isDone,</span><br><span class="line">		getCurrItem: getCurrItem</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再看看如何改写compare 函数：</span></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params"> iterator1, iterator2 </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">while</span>( !iterator1.isDone() &amp;&amp; !iterator2.isDone() )&#123;</span><br><span class="line">		<span class="keyword">if</span> ( iterator1.getCurrItem() !== iterator2.getCurrItem() )&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> ( <span class="string">'iterator1 和iterator2 不相等'</span> );</span><br><span class="line">		&#125;</span><br><span class="line">		iterator1.next();</span><br><span class="line">		iterator2.next();</span><br><span class="line">	&#125;</span><br><span class="line">	alert ( <span class="string">'iterator1 和iterator2 相等'</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator( [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] );</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator( [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] );</span><br><span class="line">compare( iterator1, iterator2 ); <span class="comment">// 输出：iterator1 和iterator2 相等</span></span><br></pre></td></tr></table></figure></p>
<h4 id="迭代类数组对象和字面量对象">迭代类数组对象和字面量对象</h4><p><strong>jquery实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params"> obj, callback </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> value,</span><br><span class="line">		i = <span class="number">0</span>,</span><br><span class="line">		length = obj.length,</span><br><span class="line">		isArray = isArraylike( obj );</span><br><span class="line">		<span class="keyword">if</span> ( isArray ) &#123; <span class="comment">// 迭代类数组</span></span><br><span class="line">			<span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</span><br><span class="line">				value = callback.call( obj[ i ], i, obj[ i ] );</span><br><span class="line">				<span class="keyword">if</span> ( value === <span class="literal">false</span> ) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> ( i <span class="keyword">in</span> obj ) &#123; <span class="comment">// 迭代object 对象</span></span><br><span class="line">				value = callback.call( obj[ i ], i, obj[ i ] );</span><br><span class="line">				<span class="keyword">if</span> ( value === <span class="literal">false</span> ) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;;</span><br></pre></td></tr></table></figure>
<p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的迭代器模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript代理模式(三)]]></title>
    <link href="/2016/07/06/proxyPattern/"/>
    <id>/2016/07/06/proxyPattern/</id>
    <published>2016-07-06T14:31:45.000Z</published>
    <updated>2016-07-09T02:19:15.157Z</updated>
    <content type="html"><![CDATA[<h4 id="代理模式">代理模式</h4><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。<br>比如：明星有经纪人作为代理。或者网络代理,访问国外网站。代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理之后，再把请求转交给本体对象。</p>
<p>例子：小明送花给A表白，由于小明内向，刚好有个共同朋友B，小明决定让B来代替自己完成送花的事情。代理意义在，小明不知道A什么时候好心情。如果好心情，表白的成功率也会高，所有B也可以监听A的心情变化，选择心情好的时候把花转交给A。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">	sendFlower: <span class="function"><span class="keyword">function</span>(<span class="params"> target</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> flower = <span class="keyword">new</span> Flower();</span><br><span class="line">		target.receiveFlower( flower );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">	receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params"> flower </span>)</span>&#123;</span><br><span class="line">		A.listenGoodMood(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 监听A 的好心情</span></span><br><span class="line">			A.receiveFlower( flower );</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">	receiveFlower: <span class="function"><span class="keyword">function</span>(<span class="params"> flower </span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'收到花 '</span> + flower );</span><br><span class="line">	&#125;,</span><br><span class="line">	listenGoodMood: <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>)</span>&#123;</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 假设10 秒之后A 的心情变好</span></span><br><span class="line">			fn();</span><br><span class="line">		&#125;, <span class="number">10000</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.sendFlower( B );</span><br></pre></td></tr></table></figure>
<p><strong>保护代理和虚拟代理</strong></p>
<p>在上例中，A也可以找B来控制对A的访问。代理B可以帮助A过滤掉一些请求，比如送花的人中年龄太大或者没有宝马。这种代理叫作保护代理。</p>
<p>假设花的价格不菲，我们可以把操作交给代理B去执行，代理B会选择在A心情好的时候再执行new Flower,这种代理叫作虚拟代理。虚拟代理把一些开销很大的对象，延迟到真正需要它的时候才去创建。</p>
<h4 id="虚拟代理实现图片预加载">虚拟代理实现图片预加载</h4><p>不用代理的预加载图片函数实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement( <span class="string">'img'</span> );</span><br><span class="line"><span class="built_in">document</span>.body.appendChild( imgNode );</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	imgNode.src = img.src;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">	setSrc: <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123;</span><br><span class="line">		imgNode.src = <span class="string">'file://C:/Users/svenzeng/Desktop/loading.gif'</span>;</span><br><span class="line">		img.src = src;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">MyImage.setSrc( <span class="string">'http:// imgcache.qq.com/music/photo/k/000GGDys0yA0Nk.jpg'</span> );</span><br></pre></td></tr></table></figure></p>
<p>为了说代理的意义，引入面向对象设计的原则—单一职责原则。<br>单一职责原则指的是，就一个类(包括对象和函数)而言，应该仅有一个引起它变化的原因。如果一个对象承担了多项指着，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个。面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement( <span class="string">'img'</span> );</span><br><span class="line">	<span class="built_in">document</span>.body.appendChild( imgNode );</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123;</span><br><span class="line">		imgNode.src = src;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> img = <span class="keyword">new</span> Image;</span><br><span class="line">	img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		myImage( <span class="keyword">this</span>.src );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123;</span><br><span class="line">		myImage( <span class="string">'file://C:/Users/svenzeng/Desktop/loading.gif'</span> );</span><br><span class="line">		img.src = src;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">proxyImage( <span class="string">'http:// imgcache.qq.com/music// N/k/000GGDys0yA0Nk.jpg'</span> );</span><br></pre></td></tr></table></figure>
<p>假设有一天我们不再需要预加载，那么只需要改成请求本体而不是请求代理对象即可。</p>
<h4 id="虚拟代理合并HTTP请求">虚拟代理合并HTTP请求</h4><p>假设我们在做一个文件同步功能，当我们选中一个checkbox的时候，它对应的文件就会被同步到另外一台备用服务器上面。但当我们选中3个checkbox的时候，依次发送3次同步文件的请求。但用户一秒钟内可能会点击3个checkbox以上。可以预见，如此频繁的网络请求将会带来相当大的开销。<br>解决方案是通过一个代理函数收集一段时间内的请求，一次性发送给服务器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> synchronousFile = <span class="function"><span class="keyword">function</span>(<span class="params"> id </span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'开始同步文件，id 为: '</span> + id );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySynchronousFile = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> cache = [], <span class="comment">// 保存一段时间内需要同步的ID</span></span><br><span class="line">	timer; <span class="comment">// 定时器</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> id </span>)</span>&#123;</span><br><span class="line">		cache.push( id );</span><br><span class="line">		<span class="keyword">if</span> ( timer )&#123; <span class="comment">// 保证不会覆盖已经启动的定时器</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		synchronousFile( cache.join( <span class="string">','</span> ) ); <span class="comment">// 2 秒后向本体发送需要同步的ID 集合</span></span><br><span class="line">		clearTimeout( timer ); <span class="comment">// 清空定时器</span></span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">		cache.length = <span class="number">0</span>; <span class="comment">// 清空ID 集合</span></span><br><span class="line">	&#125;, <span class="number">2000</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'input'</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, c; c = checkbox[ i++ ]; )&#123;</span><br><span class="line">	c.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">this</span>.checked === <span class="literal">true</span> )&#123;</span><br><span class="line">			proxySynchronousFile( <span class="keyword">this</span>.id );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="缓存代理">缓存代理</h4><p>缓存代理可以为一些开销大的运输结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。</p>
<p>计算乘机：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">'开始计算乘积'</span> );</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ )&#123;</span><br><span class="line">		a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line">mult( <span class="number">2</span>, <span class="number">3</span> ); <span class="comment">// 输出：6</span></span><br><span class="line">mult( <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24</span></span><br><span class="line"><span class="comment">//现在加入缓存代理函数：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">','</span> );</span><br><span class="line">		<span class="keyword">if</span> ( args <span class="keyword">in</span> cache )&#123;</span><br><span class="line">			<span class="keyword">return</span> cache[ args ];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cache[ args ] = mult.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24</span></span><br><span class="line">proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24 这次直接返回运算结果</span></span><br></pre></td></tr></table></figure></p>
<h4 id="用高阶函数动态创建代理">用高阶函数动态创建代理</h4><p>通过高阶函数这种灵活的方式，可以为各自计算方法创建缓存代理。计算方法被当作参数传入一个专门用于创建缓存代理的工厂中，这样一来，就可以为乘法、加法、减法等创建缓存代理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************** 计算乘积 *****************/</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ )&#123;</span><br><span class="line">		a = a * <span class="built_in">arguments</span>[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**************** 计算加和 *****************/</span></span><br><span class="line"><span class="keyword">var</span> plus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ )&#123;</span><br><span class="line">		a = a + <span class="built_in">arguments</span>[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**************** 创建缓存代理的工厂 *****************/</span></span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">','</span> );</span><br><span class="line">		<span class="keyword">if</span> ( args <span class="keyword">in</span> cache )&#123;</span><br><span class="line">			<span class="keyword">return</span> cache[ args ];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cache[ args ] = fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory( mult ),</span><br><span class="line">proxyPlus = createProxyFactory( plus );</span><br><span class="line">alert ( proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ) ); <span class="comment">// 输出：24</span></span><br><span class="line">alert ( proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ) ); <span class="comment">// 输出：24</span></span><br><span class="line">alert ( proxyPlus( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ) ); <span class="comment">// 输出：10</span></span><br><span class="line">alert ( proxyPlus( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ) ); <span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的代理模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript策略模式(二)]]></title>
    <link href="/2016/07/04/strategyPattern/"/>
    <id>/2016/07/04/strategyPattern/</id>
    <published>2016-07-04T13:47:27.000Z</published>
    <updated>2016-07-04T14:47:40.438Z</updated>
    <content type="html"><![CDATA[<h4 id="策略模式">策略模式</h4><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互转换。</p>
<h4 id="使用策略模式计算奖金">使用策略模式计算奖金</h4><p><strong>最初的代码实现(没用策略模式)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params"> performanceLevel, salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( performanceLevel === <span class="string">'S'</span> )&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ( performanceLevel === <span class="string">'A'</span> )&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ( performanceLevel === <span class="string">'B'</span> )&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculateBonus( <span class="string">'B'</span>, <span class="number">20000</span> ); <span class="comment">// 输出：40000</span></span><br><span class="line">calculateBonus( <span class="string">'S'</span>, <span class="number">6000</span> ); <span class="comment">// 输出：24000</span></span><br></pre></td></tr></table></figure></p>
<p>1.传统面向对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">performanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来定义奖金类Bonus：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.salary = <span class="literal">null</span>; <span class="comment">// 原始工资</span></span><br><span class="line">	<span class="keyword">this</span>.strategy = <span class="literal">null</span>; <span class="comment">// 绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.salary = salary; <span class="comment">// 设置员工的原始工资</span></span><br><span class="line">&#125;;</span><br><span class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params"> strategy </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.strategy = strategy; <span class="comment">// 设置员工绩效等级对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 取得奖金数额</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate( <span class="keyword">this</span>.salary ); <span class="comment">// 把计算奖金的操作委托给对应的策略对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus = <span class="keyword">new</span> Bonus();</span><br><span class="line">bonus.setSalary( <span class="number">10000</span> );</span><br><span class="line"></span><br><span class="line">bonus.setStrategy( <span class="keyword">new</span> performanceS() ); <span class="comment">// 设置策略对象</span></span><br><span class="line"><span class="built_in">console</span>.log( bonus.getBonus() ); <span class="comment">// 输出：40000</span></span><br><span class="line">bonus.setStrategy( <span class="keyword">new</span> performanceA() ); <span class="comment">// 设置策略对象</span></span><br><span class="line"><span class="built_in">console</span>.log( bonus.getBonus() ); <span class="comment">// 输出：30000</span></span><br></pre></td></tr></table></figure></p>
<p>2.javascript版本的策略模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">	<span class="string">"S"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"A"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"B"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> salary </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params"> level, salary </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> strategies[ level ]( salary );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'S'</span>, <span class="number">20000</span> ) ); <span class="comment">// 输出：80000</span></span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'A'</span>, <span class="number">10000</span> ) ); <span class="comment">// 输出：30000</span></span><br></pre></td></tr></table></figure></p>
<h4 id="多态在策略模式中的体现">多态在策略模式中的体现</h4><p>通过使用策略模式重构代码，我们消除了原程序中大片的条件分支语句。所有跟计算奖金有关的逻辑不再放在Context中，而是分布在各个策略对象中。Context并没用计算奖金的能力，而是把这个职责委托给了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。当我们对这些策略对象发生“计算奖金”请求时，它们会返回各自不同的计算结果，这正是对象多态性的体现，也是“它们可以相互替换”的目的。替换Context中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果。</p>
<h4 id="更广义的“算法”">更广义的“算法”</h4><p>策略模式指的是定义一系列的算法，并且把它们封装起来。<br>从定义上看，策略模式是用来封装算法的。但如果把策略模式仅仅用来封装算法，未免有点大材小用。在实际开发中，通常会把算法的含义扩散开来，使策略模式也可以用来封装一系列的“业务规则”。只要这些业务规则执行的目标一致，并且可以被替换使用，就可以用策略模式来封装它们。</p>
<h4 id="表单校验">表单校验</h4><p>最常见的不用策略模式代码校验表单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById( <span class="string">'registerForm'</span> );</span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( registerForm.userName.value === <span class="string">''</span> )&#123;</span><br><span class="line">		alert ( <span class="string">'用户名不能为空'</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ( registerForm.password.value.length &lt; <span class="number">6</span> )&#123;</span><br><span class="line">		alert ( <span class="string">'密码长度不能少于6 位'</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ( !<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test( registerForm.phoneNumber.value ) )&#123;</span><br><span class="line">		alert ( <span class="string">'手机号码格式不正确'</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它的缺点跟计算奖金一样：</p>
<ul>
<li>registerForm.onsubmit函数比较庞大，包含了很多if-else语句，这些语句需要覆盖所有的校验规则。</li>
<li>registerForm.onsubmit函数缺乏弹性，如果增加了一种新的校验规则，或者想把密码的长度校验从6改成8，我们都必须深入registerForm.onsubmit函数的内部实现，这是违反开放-封闭原则的。</li>
<li>算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的校验，那我们很可能将这些校验逻辑复制得漫天遍野。</li>
</ul>
<h4 id="使用策略模式重构表单校验">使用策略模式重构表单校验</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************策略对象**************************/</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">	isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params"> value, errorMsg </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( value === <span class="string">''</span> )&#123;</span><br><span class="line">			<span class="keyword">return</span> errorMsg;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	minLength: <span class="function"><span class="keyword">function</span>(<span class="params"> value, length, errorMsg </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( value.length &lt; length )&#123;</span><br><span class="line">			<span class="keyword">return</span> errorMsg;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	isMobile: <span class="function"><span class="keyword">function</span>(<span class="params"> value, errorMsg </span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( !<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test( value ) )&#123;</span><br><span class="line">			<span class="keyword">return</span> errorMsg;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/***********************Validator 类**************************/</span></span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"> dom, rules </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[ i++ ]; )&#123;</span><br><span class="line">		(<span class="function"><span class="keyword">function</span>(<span class="params"> rule </span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> strategyAry = rule.strategy.split( <span class="string">':'</span> );</span><br><span class="line">			<span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line">			self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> strategy = strategyAry.shift();</span><br><span class="line">				strategyAry.unshift( dom.value );</span><br><span class="line">				strategyAry.push( errorMsg );</span><br><span class="line">				<span class="keyword">return</span> strategies[ strategy ].apply( dom, strategyAry );</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;)( rule )</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[ i++ ]; )&#123;</span><br><span class="line">		<span class="keyword">var</span> errorMsg = validatorFunc();</span><br><span class="line">		<span class="keyword">if</span> ( errorMsg )&#123;</span><br><span class="line">			<span class="keyword">return</span> errorMsg;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/***********************客户调用代码**************************/</span></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById( <span class="string">'registerForm'</span> );</span><br><span class="line"><span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">	validator.add( registerForm.userName, [&#123;</span><br><span class="line">		strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">		errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">		errorMsg: <span class="string">'用户名长度不能小于10 位'</span></span><br><span class="line">	&#125;]);</span><br><span class="line">	validator.add( registerForm.password, [&#123;</span><br><span class="line">		strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">		errorMsg: <span class="string">'密码长度不能小于6 位'</span></span><br><span class="line">	&#125;]);</span><br><span class="line">	<span class="keyword">var</span> errorMsg = validator.start();</span><br><span class="line">	<span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> errorMsg = validataFunc();</span><br><span class="line">	<span class="keyword">if</span> ( errorMsg )&#123;</span><br><span class="line">		alert ( errorMsg );</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的策略模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript单例模式(一)]]></title>
    <link href="/2016/06/30/singletonPattern/"/>
    <id>/2016/06/30/singletonPattern/</id>
    <published>2016-06-30T14:22:45.000Z</published>
    <updated>2016-07-04T14:01:24.005Z</updated>
    <content type="html"><![CDATA[<h5 id="单例模式">单例模式</h5><p>单例模式的定义是：保证一个类仅有一个实例,并提供一个访问它的全局访问点。</p>
<p>以下几种方式可以相对降低全局变量带来的命名污染：<br>1.使用命名空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">	a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="number">1</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>2.使用闭包封装私有变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _name = <span class="string">'sven'</span>,</span><br><span class="line">    _age = <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _name + <span class="string">'-'</span> + _age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<h4 id="惰性单例">惰性单例</h4><p>以WebQQ登录浮窗为例,与全局变量结合实现惰性单例。<br>假设我们是WebQQ的开发人员,当点击左边导航QQ头像时，会弹出一个登录浮窗,很明显这个浮窗在页面里总是唯一的，不可能出现同时存在两个登录窗口的情况。</p>
<p>第一种方案是在页面加载完成的时候创建好这个div浮窗，这个浮窗一开始隐藏状态，当用户点击登录按钮的时候，开始显示。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement( <span class="string">'div'</span> );</span><br><span class="line">    div.innerHTML = <span class="string">'我是登录浮窗'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild( div );</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'loginBtn'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>但这种方式有个问题，也许我们进入WebQQ不需要登录操作,如果浮窗一开始就创建,就白白浪费一些DOM节点。以下改写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement( <span class="string">'div'</span> );</span><br><span class="line">    div.innerHTML = <span class="string">'我是登录浮窗'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild( div );</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'loginBtn'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>虽然达到了惰性目的，但失去单例的效果.每次点击都要创建一个新的的登录浮窗。<br>也许我们已经想到用变量来判断是否已经创建过登录浮窗。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !div )&#123;</span><br><span class="line">            div = <span class="built_in">document</span>.createElement( <span class="string">'div'</span> );</span><br><span class="line">            div.innerHTML = <span class="string">'我是登录浮窗'</span>;</span><br><span class="line">            div.style.display = <span class="string">'none'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild( div );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'loginBtn'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="通用惰性单例">通用惰性单例</h4><p>上面完成一个可用的惰性单例，但是发现还有如下问题：</p>
<ul>
<li>这段代码仍然是违反单一职责原则的，创建对象和管理单例的逻辑都放在createLoginLayer对象内部。</li>
<li>如果我们下次需要创建页面中唯一的iframe，或者script标签，用来跨域请求数据，就必须得如法炮制，把createLoginLayer函数几乎照抄一遍：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createIframe= (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iframe;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !iframe)&#123;</span><br><span class="line">            iframe= <span class="built_in">document</span>.createElement( <span class="string">'iframe'</span> );</span><br><span class="line">            iframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild( iframe);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> iframe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>把不变的部分隔离出来：用一个变量来标志是否创建过对象，如果是，则下次直接返回已经创建好的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || ( result = fn .apply(<span class="keyword">this</span>, <span class="built_in">arguments</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>创建对象的方法fn被当成参数动态传入getSingle函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement( <span class="string">'div'</span> );</span><br><span class="line">    div.innerHTML = <span class="string">'我是登录浮窗'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild( div );</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle( createLoginLayer );</span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'loginBtn'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面我们再试试创建唯一的iframe 用于动态加载第三方页面：</span></span><br><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement ( <span class="string">'iframe'</span> );</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild( iframe );</span><br><span class="line">    <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'loginBtn'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleIframe();</span><br><span class="line">    loginLayer.src = <span class="string">'http://baidu.com'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这种单例模式还可以用于其他用途，比如渲染页面后通过ajax动态给列表绑定click事件，click事件实际上只需要在第一次渲染列表的时候被绑定一次。</p>
<p><strong>jquery的做法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $( <span class="string">'div'</span> ).one( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert ( <span class="string">'click'</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'开始渲染列表'</span> );</span><br><span class="line">    bindEvent();</span><br><span class="line">&#125;;</span><br><span class="line">render();</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">render();</span><br></pre></td></tr></table></figure></p>
<p><strong>getSingle函数做法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindEvent = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert ( <span class="string">'click'</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'开始渲染列表'</span> );</span><br><span class="line">    bindEvent();</span><br><span class="line">&#125;;</span><br><span class="line">render();</span><br><span class="line">render();</span><br><span class="line">render();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript设计模式中的单例模式。]]>
    
    </summary>
    
      <category term="js设计模式" scheme="/tags/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：集合]]></title>
    <link href="/2016/06/27/dataStructureOfGather/"/>
    <id>/2016/06/27/dataStructureOfGather/</id>
    <published>2016-06-27T14:38:54.000Z</published>
    <updated>2016-06-27T15:03:29.417Z</updated>
    <content type="html"><![CDATA[<h5 id="集合">集合</h5><p> 集合由一组无序且唯一的项组成。在ES6规范中已实现set类：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">文档</a></p>
<p>下例实现的set类以ES6中set类的实现为基础ES5.1完成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">            items[value] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.delete = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">            <span class="keyword">delete</span> items[value];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">        <span class="comment">//return value in items;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Modern browsers function</span><br><span class="line">     * IE9+, FF4+, Chrome5+, Opera12+, Safari5+</span><br><span class="line">     * @returns &#123;Number&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * cross browser compatibility - legacy browsers</span><br><span class="line">     * for modern browsers use size function</span><br><span class="line">     * @returns &#123;number&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.sizeLegacy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(items.hasOwnProperty(key))</span><br><span class="line">                ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Modern browsers function</span><br><span class="line">     * IE9+, FF4+, Chrome5+, Opera12+, Safari5+</span><br><span class="line">     * @returns &#123;Array&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> values = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>, keys=<span class="built_in">Object</span>.keys(items); i&lt;keys.length; i++) &#123;</span><br><span class="line">            values.push(items[keys[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.valuesLegacy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> values = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(items.hasOwnProperty(key)) &#123;</span><br><span class="line">                values.push(items[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getItems = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> items;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//并集操作</span></span><br><span class="line">    <span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//创建新的集合,代表两个集合的并集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values(); <span class="comment">//获取第一个集合的所有值,添加到unionSet集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        values = otherSet.values(); <span class="comment">//第二个集合同上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unionSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//交集操作</span></span><br><span class="line">    <span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">//创建新的集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//遍历第一个集合所有值,循环查看其它集合中是否有相同值。</span></span><br><span class="line">            <span class="keyword">if</span> (otherSet.has(values[i]))&#123;</span><br><span class="line">                intersectionSet.add(values[i]); <span class="comment">//添加到新集合中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intersectionSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//差集操作</span></span><br><span class="line">    <span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//遍历第一个集合所有值,循环查看其它集合中是否没有该值。</span></span><br><span class="line">            <span class="keyword">if</span> (!otherSet.has(values[i]))&#123;   </span><br><span class="line">                differenceSet.add(values[i]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> differenceSet;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//子集操作</span></span><br><span class="line">    <span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size())&#123; <span class="comment">//验证当前的集合如果大于otherSet集合就不是一个子集。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123; <span class="comment">//循环遍历集合</span></span><br><span class="line">                <span class="keyword">if</span> (!otherSet.has(values[i]))&#123; <span class="comment">//如果其它集合中没有当前集合的值,就返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [1]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">1</span>));   <span class="comment">//outputs true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size());   <span class="comment">//outputs 1</span></span><br><span class="line"></span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">2</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size());   <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(set.sizeLegacy());   <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs [2]</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//outputs []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//集合的一些操作</span></span><br><span class="line"><span class="comment">//--------- Union ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line">setB.add(<span class="number">5</span>);</span><br><span class="line">setB.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unionAB = setA.union(setB);</span><br><span class="line"><span class="built_in">console</span>.log(unionAB.values());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Intersection ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> intersectionAB = setA.intersection(setB);</span><br><span class="line"><span class="built_in">console</span>.log(intersectionAB.values());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Difference ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> differenceAB = setA.difference(setB);</span><br><span class="line"><span class="built_in">console</span>.log(differenceAB.values());</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------- Subset ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">1</span>);</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> setC = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setC.add(<span class="number">2</span>);</span><br><span class="line">setC.add(<span class="number">3</span>);</span><br><span class="line">setC.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setB));</span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setC));</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构集合。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：链表]]></title>
    <link href="/2016/06/25/dataStructureOfList/"/>
    <id>/2016/06/25/dataStructureOfList/</id>
    <published>2016-06-25T03:42:06.000Z</published>
    <updated>2016-06-25T07:12:59.339Z</updated>
    <content type="html"><![CDATA[<h5 id="链表">链表</h5><p> 链表的例子例如寻宝游戏,有一条线索,线索指向寻找下一条线索地点的指针。顺着这条链接下去,得到另一条指向再下一处的线索。得到列表中间的线索的唯一办法,就是从起点顺着列表找。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//node表示要加入列表的项</span></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>; <span class="comment">//next 为指向下一个节点的指针</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向列表尾部添加一个新的项</span></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//如果head元素为null,新添加的就为第一个节点</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            current = head;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环,直到找到最后一项列表</span></span><br><span class="line">            <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到最后一项,将其next赋为node,建立链接</span></span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//更新列表的长度</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//向列表的特定位置插入一个新的项</span></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一个位置添加</span></span><br><span class="line"></span><br><span class="line">                node.next = current;</span><br><span class="line">                head = node;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123;</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //更新列表长度</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    //从列表的特定位置移除一项</span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //检查越界值</span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //移除第一项</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125; <span class="attribute">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //将<span class="attribute">previous</span>与<span class="attribute">current</span>的下一项链接起来：跳过<span class="attribute">current</span>,从而移除它</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //从列表中移除一项</span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    //返回元素在列表中的索引,没有该元素返回<span class="attribute">-1</span></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span> (<span class="attribute">current</span>) &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">==</span> <span class="attribute">current.element</span>) &#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    //返回第一个节点</span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    //由于列表使用了<span class="attribute">node</span>类,重写继承自<span class="attribute">javascript</span>对象默认的<span class="attribute">toString</span>方法,让其只输出元素的值。</span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">string</span> = '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span> (<span class="attribute">current</span>) &#123;</span><br><span class="line">            <span class="attribute">string</span> += <span class="attribute">current.element</span> + (<span class="attribute">current.next</span> ? ', ' <span class="attribute">:</span> '');</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">string</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>双向链表</strong><br> 双向链表和普通链表的区别在于：<br> 普通链表：一个节点只有链向下一个节点的链接。<br> 双向链表的链接是双向的：一个链向下一个元素,另一个链向前一个元素。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> tail = <span class="literal">null</span>; <span class="comment">//新增的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//first node on list</span></span><br><span class="line">            head = node;</span><br><span class="line">            tail = node; <span class="comment">//NEW</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//attach to the tail node //NEW</span></span><br><span class="line">            tail.next = node;</span><br><span class="line">            node.prev = tail;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//update size of list</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查越界值</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//在第一位置添加</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!head)&#123;       <span class="comment">//如果列表为空</span></span><br><span class="line">                    head = node;</span><br><span class="line">                    tail = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//第一个元素不为空,就插到第一个元素前面</span></span><br><span class="line">                    node.next = current;</span><br><span class="line">                    current.prev = node;</span><br><span class="line">                    head = node;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>  <span class="keyword">if</span> (position === length) &#123; <span class="comment">//最后一项</span></span><br><span class="line"></span><br><span class="line">                current = tail;     <span class="comment">// </span></span><br><span class="line">                current.next = node;</span><br><span class="line">                node.prev = current;</span><br><span class="line">                tail = node;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123; //</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">current.prev</span> = <span class="attribute">node</span>; //</span><br><span class="line">                <span class="attribute">node.prev</span> = <span class="attribute">previous</span>; //</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //<span class="attribute">update</span> <span class="attribute">size</span> <span class="attribute">of</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //检查越界值</span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //移除第一项</span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">current.next</span>; //</span><br><span class="line"></span><br><span class="line">                //如果只有一项,更新<span class="attribute">tail</span></span><br><span class="line">                <span class="attribute">if</span> (<span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">1</span>)&#123; //</span><br><span class="line">                    <span class="attribute">tail</span> = <span class="attribute">null</span>;</span><br><span class="line">                &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">                    <span class="attribute">head.prev</span> = <span class="attribute">null</span>; //</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">length-1</span>)&#123; //最后一项</span><br><span class="line"></span><br><span class="line">                <span class="attribute">current</span> = <span class="attribute">tail</span>; //</span><br><span class="line">                <span class="attribute">tail</span> = <span class="attribute">current.prev</span>;</span><br><span class="line">                <span class="attribute">tail.next</span> = <span class="attribute">null</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> &#123; //从中间移除元素</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //将<span class="attribute">previous</span>与<span class="attribute">current</span>的下一项链接起来<span class="attribute">--</span>跳过<span class="attribute">current</span></span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>; // &#123;<span class="attribute">6</span>&#125;</span><br><span class="line">                <span class="attribute">current.next.prev</span> = <span class="attribute">previous</span>; //<span class="attribute">NEW</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">-1</span>;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">index</span>++;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">in</span> <span class="attribute">the</span> <span class="attribute">middle</span> <span class="attribute">of</span> <span class="attribute">the</span> <span class="attribute">list</span></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">last</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.</span> <span class="attribute">size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current</span> ? <span class="attribute">current.element</span> <span class="attribute">:</span> '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current</span> &amp;&amp; <span class="attribute">current.next</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.inverseToString</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">tail</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current</span> ? <span class="attribute">current.element</span> <span class="attribute">:</span> '';</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current</span> &amp;&amp; <span class="attribute">current.prev</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.prev</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.printInverse</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.inverseToString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getTail</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">tail</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p> <strong>循环链表</strong><br> 循环链表的区别在于,最后一个元素指向下一个元素的指针,不是null,而是指向第一个元素head。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CircularLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">            current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head === <span class="literal">null</span>)&#123; <span class="comment">//first node on list</span></span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            current = head;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//loop the list until find last item</span></span><br><span class="line">            <span class="keyword">while</span>(current.next !== head)&#123; <span class="comment">//last element will be head instead of NULL</span></span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//get last item and assign next to added item to make the link</span></span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set node.next to head - to have circular list</span></span><br><span class="line">        node.next = head;</span><br><span class="line"></span><br><span class="line">        length++; <span class="comment">//update size of list</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check for out-of-bounds values</span></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current = head,</span><br><span class="line">                previous,</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">//add on first position</span></span><br><span class="line"></span><br><span class="line">                node.next = current;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//update last element</span></span><br><span class="line">                <span class="keyword">while</span>(current.next !== head)&#123; <span class="comment">//last element will be head instead of NULL</span></span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                head = node;</span><br><span class="line">                current.next = head;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attribute">position</span>)&#123;</span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">node.next</span> = <span class="attribute">current</span>;</span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">node</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length</span>++; //<span class="attribute">update</span> <span class="attribute">size</span> <span class="attribute">of</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.removeAt</span> = <span class="attribute">function</span>(<span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">for</span> <span class="attribute">out-of-bounds</span> <span class="attribute">values</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">position</span> &gt;</span> -1 &amp;&amp; position <span class="tag">&lt; <span class="attribute">length</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">                <span class="attribute">previous</span>,</span><br><span class="line">                <span class="attribute">index</span> = <span class="attribute">0</span>;</span><br><span class="line"></span><br><span class="line">            //<span class="attribute">removing</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">position</span> =<span class="value">==</span> <span class="attribute">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123; //<span class="attribute">needs</span> <span class="attribute">to</span> <span class="attribute">update</span> <span class="attribute">last</span> <span class="attribute">element</span> <span class="attribute">first</span></span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="attribute">head</span> = <span class="attribute">head.next</span>;</span><br><span class="line">                <span class="attribute">current.next</span> = <span class="attribute">head</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="attribute">else</span> &#123; //<span class="attribute">no</span> <span class="attribute">need</span> <span class="attribute">to</span> <span class="attribute">update</span> <span class="attribute">last</span> <span class="attribute">element</span> <span class="attribute">for</span> <span class="attribute">circular</span> <span class="attribute">list</span></span><br><span class="line"></span><br><span class="line">                <span class="attribute">while</span> (<span class="attribute">index</span>++ &lt; <span class="attribute">position</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="attribute">previous</span> = <span class="attribute">current</span>;</span><br><span class="line">                    <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //<span class="attribute">link</span> <span class="attribute">previous</span> <span class="attribute">with</span> <span class="attribute">current</span>'<span class="attribute">s</span> <span class="attribute">next</span> <span class="attribute">-</span> <span class="attribute">skip</span> <span class="attribute">it</span> <span class="attribute">to</span> <span class="attribute">remove</span></span><br><span class="line">                <span class="attribute">previous.next</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">length--</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="attribute">else</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.remove</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">index</span> = <span class="attribute">this.indexOf</span>(<span class="attribute">element</span>);</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">this.removeAt</span>(<span class="attribute">index</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.indexOf</span> = <span class="attribute">function</span>(<span class="attribute">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">index</span> = <span class="attribute">-1</span>;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">first</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">index</span>++;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">in</span> <span class="attribute">the</span> <span class="attribute">middle</span> <span class="attribute">of</span> <span class="attribute">the</span> <span class="attribute">list</span></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">index</span>++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="attribute">check</span> <span class="attribute">last</span> <span class="attribute">item</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="attribute">element</span> =<span class="value">=</span> <span class="attribute">current.element</span>)&#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="attribute">index</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.isEmpty</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span> =<span class="value">==</span> <span class="attribute">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.size</span> = <span class="attribute">function</span>() &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">length</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.getHead</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">head</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.toString</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">let</span> <span class="attribute">current</span> = <span class="attribute">head</span>,</span><br><span class="line">            <span class="attribute">s</span> = <span class="attribute">current.element</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">while</span>(<span class="attribute">current.next</span> !=<span class="value">=</span> <span class="attribute">head</span>)&#123;</span><br><span class="line">            <span class="attribute">current</span> = <span class="attribute">current.next</span>;</span><br><span class="line">            <span class="attribute">s</span> += ', ' + <span class="attribute">current.element</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="attribute">s.toString</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">this.print</span> = <span class="attribute">function</span>()&#123;</span><br><span class="line">        <span class="attribute">console.log</span>(<span class="attribute">this.toString</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构链表。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：队列]]></title>
    <link href="/2016/06/24/dataStructureOfQueue/"/>
    <id>/2016/06/24/dataStructureOfQueue/</id>
    <published>2016-06-24T15:00:22.000Z</published>
    <updated>2016-06-25T03:30:28.764Z</updated>
    <content type="html"><![CDATA[<h5 id="队列">队列</h5><p> 队列遵循FIFO(先进先出,先来先服务)。例如：排队做些事情。</p>
<p>创建一个队列类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">//向尾部添加一个新的项。</span></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        items.push(element);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//移除队列的第一项,并返回被移除的元素。</span></span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回队列中的第一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//如果队列为空,返回true,否则false</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = [];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//outputs true</span></span><br><span class="line">queue.enqueue(<span class="string">"John"</span>);</span><br><span class="line">queue.enqueue(<span class="string">"Jack"</span>);</span><br><span class="line">queue.print();</span><br><span class="line">queue.enqueue(<span class="string">"Camila"</span>);</span><br><span class="line">queue.print();</span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//outputs 3</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//outputs false</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.print();</span><br></pre></td></tr></table></figure></p>
<p><strong>优先队列</strong><br>举个例子：就是机场登机的顺序。头等舱和商务舱乘客的优先级要高于经济舱乘客。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优先级为1,2,3,4,5。数值越大优先级越低</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> items = [];</span><br><span class="line">    <span class="comment">//参数包含要添加的元素,及其在队列中的优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span> (<span class="params">element, priority</span>)</span>&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (queueElement.priority &lt; items[i].priority)&#123; <span class="comment">// 找到比要添加的元素的priority值更大项时(优先级更低)</span></span><br><span class="line">                items.splice(i,<span class="number">0</span>,queueElement);             <span class="comment">// 把新元素插入比较元素之前</span></span><br><span class="line">                added = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 终止队列循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!added)&#123;</span><br><span class="line">            items.push(queueElement); <span class="comment">//如果队列为空,或要添加元素的priority值大于任何已有的元素,添加到末尾。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span>  - <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Maxwell"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</span><br><span class="line">priorityQueue.print();</span><br></pre></td></tr></table></figure>
<p><strong>循环队列</strong><br>循环队列的例子击鼓传花游戏:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span> (<span class="params">nameList, num</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要用到一开始队列类</span></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把里面的名字全都加入队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nameList.length; i++)&#123;</span><br><span class="line">        queue.enqueue(nameList[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> eliminated = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">            queue.enqueue(queue.dequeue()); <span class="comment">//num为循环的次数,循环将第一个元素删除并添加至末尾,模拟击鼓传花</span></span><br><span class="line">        &#125;</span><br><span class="line">        eliminated = queue.dequeue(); <span class="comment">//从队列中移除,提示删除一个元素</span></span><br><span class="line">        <span class="built_in">console</span>.log(eliminated + <span class="string">' was eliminated from the Hot Potato game.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue.dequeue(); <span class="comment">//最终胜利者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'John'</span>,<span class="string">'Jack'</span>,<span class="string">'Camila'</span>,<span class="string">'Ingrid'</span>,<span class="string">'Carl'</span>];</span><br><span class="line"><span class="keyword">let</span> winner = hotPotato(names, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The winner is: '</span> + winner);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构队列。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数据结构：栈]]></title>
    <link href="/2016/06/24/dataStructureOfStack/"/>
    <id>/2016/06/24/dataStructureOfStack/</id>
    <published>2016-06-23T23:50:34.000Z</published>
    <updated>2016-06-24T14:55:16.562Z</updated>
    <content type="html"><![CDATA[<h5 id="栈">栈</h5><p> 栈是一种遵从 <strong>后进先出</strong> (LIFO)原则的有序集合。新添加的或待删除的元素都保存在栈的末尾,称作栈顶,另一端就叫栈底。在栈里,新元素都靠近栈顶,旧元素都接近栈底。<br>类似于生活中堆好的盘子,先从最上面的开始用。</p>
<p>下面将创建一个栈的类：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加新元素到栈顶</span></span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    items.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈顶的元素,同时返回被移除的元素</span></span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈顶的元素,不对栈做任何修改</span></span><br><span class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除栈里的所有元素</span></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈里的元素个数</span></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//清空栈</span></span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印栈到控制台</span></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>利用Stack类,实现十进制转换二进制例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),rem,binaryString = <span class="string">''</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % <span class="number">2</span>);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += remStack.pop().String();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">233</span>)); <span class="comment">// 11101001</span></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">10</span>)); <span class="comment">// 1010</span></span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">1000</span>)); <span class="comment">// 1111101000</span></span><br></pre></td></tr></table></figure></p>
<p>十进制转换任何进制例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber,base</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),rem,binaryString = <span class="string">''</span>,digits = <span class="string">'0123456789ABCDEF'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">2</span>)); <span class="comment">// 11000011111111001</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">8</span>)); <span class="comment">// 303771</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">16</span>)); <span class="comment">// 187F9</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-javascript中数据结构栈。]]>
    
    </summary>
    
      <category term="数据结构和算法" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据存取(二)]]></title>
    <link href="/2016/06/22/DataAccess/"/>
    <id>/2016/06/22/DataAccess/</id>
    <published>2016-06-22T14:44:32.000Z</published>
    <updated>2016-06-23T14:25:53.052Z</updated>
    <content type="html"><![CDATA[<h5 id="JavaScript中的数据存储位置">JavaScript中的数据存储位置</h5><p>数据存储在数组和对象中,访问速度慢于字面量和局部变量。跟浏览器也有很大关系。</p>
<p><strong>标示符解析的性能</strong><br> 在执行环境中,标示符所在的位置越深,它的读写速度也就最慢。因此,函数中读写局部变量比全局变量总是快。全局变量总是存在于执行环境作用域链的最末端。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bd = <span class="built_in">document</span>.body,</span><br><span class="line">  links = <span class="built_in">document</span>.getElementsByTagNamme(<span class="string">"a"</span>),</span><br><span class="line">  i = <span class="number">0</span>,</span><br><span class="line">  len = links.length;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">    update(links[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"go-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bd.className = <span class="string">"active"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>document是全局对象,每次都有遍历整个作用域链。<br>优化后代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUI</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> doc = <span class="built_in">document</span>,</span><br><span class="line">  bd = doc.body,</span><br><span class="line">  links = doc.getElementsByTagNamme(<span class="string">"a"</span>),</span><br><span class="line">  i = <span class="number">0</span>,</span><br><span class="line">  len = links.length;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">    update(links[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  doc.getElementById(<span class="string">"go-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bd.className = <span class="string">"active"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>错误处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  methodThatMightCauseAnError();</span><br><span class="line">&#125;cache(ex)&#123;</span><br><span class="line">  handleError(ex);<span class="comment">//委托给错误处理器函数,由于只执行一条语句,没有局部变量的访问。</span></span><br><span class="line">                  <span class="comment">//作用域链的临时改变不会影响代码性能。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>避免使用动态作用域,包括with、try-cache和eval。</p>
<p><strong>闭包、作用域和内存</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignEvents</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = <span class="string">"xdi9592"</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"save-btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    saveDocument(id);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>assignEvents函数执行时,会创建一个包含id的活动对象,成为作用域链中的第一个对象,全局对象紧随其后。<br>因为id引用了外部作用域的变量,闭包[scope]属性包含了与assignEvents函数执行作用域链相同的对象引用。<br>通常来说,活动对象会随着执行环境一同销毁,但是由于引用一直存在,所以活动对象无法销毁。会导致性能问题。<br><code>尤其在IE浏览器中需要关注,闭包会导致内存泄露。</code></p>
<p><strong>原型</strong><br>在浏览器中这个属性是<strong>proto</strong>对象,对象有两种成员类型:实例成员和原型成员。实例成员直接存在于对象实例中,原型成员则从对象原型继承而来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  title:<span class="string">"high"</span>,</span><br><span class="line">  publisher:<span class="string">"yahoo!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(book.toString()); <span class="comment">//"[object object]"</span></span><br></pre></td></tr></table></figure>
<p>对象boot并没有toString方法,却顺利执行了,方法toString()是由对象book继承而来的原型成员。<br>可以使用hasOwnProperty()方法来判断对象是否包含特定的实例成员,是否包含特定属性,使用in操作符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(book.hasOwnProperty(<span class="string">"title"</span>)); <span class="comment">//true</span></span><br><span class="line">alert(book.hasOwnProperty(<span class="string">"toString"</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">alert(<span class="string">"title"</span> <span class="keyword">in</span> book); <span class="comment">//true</span></span><br><span class="line">alert(<span class="string">"toString"</span> <span class="keyword">in</span> book); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><strong>原型链</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">title,publisher</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.title = title;</span><br><span class="line">  <span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book.prototype.sayTitle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book1 = <span class="keyword">new</span> Book(<span class="string">"High Per Java"</span>,<span class="string">"Yahoo! Press"</span>);</span><br><span class="line"><span class="keyword">var</span> book2 = <span class="keyword">new</span> Book(<span class="string">"javaScript: The Good Parts"</span>,<span class="string">"Yahoo! Press"</span>);</span><br><span class="line"></span><br><span class="line">alert(book1 <span class="keyword">instanceof</span> Book); <span class="comment">//true</span></span><br><span class="line">alert(book1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">book1.sayTitle(); <span class="comment">//"High Per Java"</span></span><br><span class="line">alert(book1.toString()); <span class="comment">//"[object object]"</span></span><br></pre></td></tr></table></figure></p>
<p>使用Book构造函数创建新的Book实例。book1的原型(<strong>proto</strong>)是Book.prototype,而Book.prototype的原型是Object。book1和book2继承原型链中的所有成员,它们有着各自的title和publisher属性,其他部分都继承自原型。<br>对象在原型链中存在的位置越深,找到它就越慢。</p>
<p><strong>嵌套成员</strong>会导致JavaScript引擎搜索所有对象成员。例：window.location.href。嵌套越深读取时间越长。<br>location.href总是比window.location.href要快,后者比window.location.href.toString()要快。</p>
<p><strong>缓存对象成员值</strong><br>在函数中如果要多次读取一个对象属性,最佳做法是将属性值保存到局部变量中。局部变量能用来替代属性以避免多次查找带来的性能开销,特别是处理嵌套对象成员,这样做会明显提升执行速度。</p>
<p><strong>提示</strong>：这种优化并不推荐用于对象的成员方法。因为对象方法使用this来判断执行环境,把一个对象方法保存在局部变量会导致this绑定到window,<br>而this值的改变会使得JavaScript引擎无法正确解析它的对象成员,进而导致程序出错。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解javascript的数据存取优化。]]>
    
    </summary>
    
      <category term="性能优化" scheme="/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="javascript" scheme="/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2DCanvas：底层2D图像渲染(六)]]></title>
    <link href="/2016/06/22/2DCanvas/"/>
    <id>/2016/06/22/2DCanvas/</id>
    <published>2016-06-21T23:22:36.000Z</published>
    <updated>2016-06-22T00:00:52.167Z</updated>
    <content type="html"><![CDATA[<h5 id="基础知识">基础知识</h5><p> HTML5的Canvas API终结了Flash独霸的地位,Canvas能在一个DOM元素中创建2D形状,无需任何插件的支持。Canvas可实现真正的跨平台应用,并且结合各种框架(PhoneGap)进行开发。</p>
<p>Canvas更擅长构建复杂动画及交互效果。如果想实现简单的可视化或动画,可以用SVG技术来实现,利用SVG,可以创建Logo图标、图表以及信息图,另外它还有很多Canvas所缺乏的内建功能,比如动画、可缩放性,以及支持CSS。</p>
<p>本文利用canvas创建一个打砖块游戏,来更好的理解canvas并能利用这些知识来开发自己的Canvas应用。</p>
<hr>
<p>canvas的坐标系与平常的笛卡尔坐标系有一点差别,该坐标系的原点位于左上角,y轴方向向下。</p>
<p>生成Cancas绘图环境:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">id</span>=<span class="value">"canvas"</span> <span class="attribute">width</span>=<span class="value">"408"</span> <span class="attribute">height</span>=<span class="value">"250"</span>&gt;</span></span><br><span class="line">  你的浏览器不支持canvas。 //不支持canvas的浏览器会显示内容。</span><br><span class="line"><span class="tag">&lt;/<span class="title">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById('canvas');</span><br><span class="line">var context = canvas.getContext('2d'); //获取2d绘图环境</span><br></pre></td></tr></table></figure></p>
<p>验证浏览器是否支持canvas:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">if</span> (canvas.getContext &amp;&amp; canvas.getContext(<span class="string">'2d'</span>))&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="打砖块游戏">打砖块游戏</h5><p><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch6/index.html" target="_blank" rel="external">打开游戏</a></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-canvas的相关应用。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动应用：客户端存储与离线执行(五)]]></title>
    <link href="/2016/06/18/clientStoredAndOffline/"/>
    <id>/2016/06/18/clientStoredAndOffline/</id>
    <published>2016-06-18T03:32:37.000Z</published>
    <updated>2016-06-21T15:15:22.437Z</updated>
    <content type="html"><![CDATA[<h5 id="主要内容">主要内容</h5><ul>
<li>利用Web Storage API,将数据存储在客户端</li>
<li>管理一个完整的位于客户端上的IndexedDB数据库</li>
<li>利用Application Cache API来实现应用离线执行</li>
</ul>
<h5 id="移动应用My_Tasks">移动应用My Tasks</h5><p> 通过这个应用,你将主要学会以下几个关键技能:</p>
<ul>
<li>利用WebStorage API将数据存储在客户端</li>
<li>利用IndexedDB数据库将数据储存在客户端</li>
<li>利用应用缓存清单文件构建能够支持离线使用的Web应用</li>
</ul>
<p><a href="https://shizhidi.github.io/assets/examples/html5-ia/ch5/index.html" target="_blank" rel="external">打开应用</a></p>
<p>注意将应用运行在服务器上,否则,它将无法在移动设备上运行,其离线功能也无法使用。</p>
<p>Python服务器模块,node服务器,php都行。</p>
<p>关于Web Sql:在IndexedDB之前,HTML5有个WebSql的客户端数据库规范,一种定义在浏览器中的关系数据库。现已不再是HTML5规范了,<br>但是许多浏览器厂商已经支持它,特别是移动端浏览器。例:sqllite</p>
<h5 id="应用缓存清单">应用缓存清单</h5><p> 使用应用缓存清单文件需要用到真实的Web服务器。一共需要3个步骤：</p>
<ul>
<li>配置Web服务器。</li>
<li>创建应用缓存清单文件</li>
<li>侦测清单文件中的变化</li>
</ul>
<p>apache服务器,可以在httpd.conf配置文件中添加<code>addType text/cache-manifest .appcache</code>。<br>nginx服务器,在nginx conf目录下,为mime.types文件添加一行代码,<code>text/cache-manifest appcache</code>。</p>
<p>缓存清单文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST&#10;# Rev 3&#10;&#10;CACHE:&#10;index.html&#10;pics/logo.png&#10;stylesheet.css&#10;&#10;FALLBACK:&#10;*.html     /offline.html&#10;&#10;NETWORK:&#10;http://api.stockwebsite.com</span><br></pre></td></tr></table></figure></p>
<p>CACHE段是项目默认的分段,其中的URI在随后首次下载时将被缓存。 <code>也可以不知道CACHE标题,直接把URI放在标题CACHE MANIFEST下面</code><br>FALLBACK段是可选的,指定了在某资源处于离线时,转而使用的其他URI。结对中的第一个URI是在线资源,第二个是本地的回退资源。可以使用通配符<em><br><code>两种URL都必须有相对路径名称,这里的URI域缓存清单文件中其他部分中的URL,都必须有和清单文件一样的方案、主机和端口</code><br>NETWORK部分是在线访问的白名单。所有列在此标题头下的URI都必须绕过缓存访问在线资源。可以使用通配符</em></p>
<p>修改html元素：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">class</span>=<span class="value">"blue"</span> <span class="attribute">manifest</span>=<span class="value">"tasks.appcache"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以更改.appcache文件中更新修订号,测试应用是否能够加载新版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解-客户的存储方式有哪些,以及离线执行应用。]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[形状(三)]]></title>
    <link href="/2016/06/12/shape/"/>
    <id>/2016/06/12/shape/</id>
    <published>2016-06-12T03:19:10.000Z</published>
    <updated>2016-06-12T03:19:36.179Z</updated>
    <content type="html"></content>
    <summary type="html">
    <![CDATA[本文主要介绍了各种背景和边框的样式。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[背景与边框(二)]]></title>
    <link href="/2016/06/11/backgroundAndBorder/"/>
    <id>/2016/06/11/backgroundAndBorder/</id>
    <published>2016-06-11T13:28:38.000Z</published>
    <updated>2016-06-13T16:04:41.407Z</updated>
    <content type="html"><![CDATA[<h5 id="半透明边框"><a href="http://play.csssecrets.io/translucent-borders" target="_blank" rel="external">半透明边框</a></h5><p> 大家对半透明颜色的使用基本上还是集中在背景上,原因：</p>
<ul>
<li>与#ff0066和orange一样：把它们当作图片,只在背景中使用。</li>
<li>针对背景提供的回退方案比其他属性容易多,半透明背景色的回退方案,使用一张单像素的透明图片来。其他属性,只能回退到实色。</li>
<li>其他属性使用半透明颜色不那么容易。</li>
</ul>
<p>给一个容器设置一层白色背景和一道半透明白色边框,但是背景色会从它的半透明边框透上来,最初尝试:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>解决方案：background-clip 浏览器会用内边距的外沿来把背景裁切掉。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-clip</span>:<span class="value"> padding-box</span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="多重边框"><a href="http://play.csssecrets.io/multiple-borders" target="_blank" rel="external">多重边框</a></h5><ol>
<li>box-shadow方案<br>多数人用过box-shadow来生成投影,但还有第4个参数(“扩张半径”),指定正值或负值,<code>让投影面积加大或减小</code>：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="hexcolor">#655</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>它支持逗号分隔语法,我们可以创建任意数量的投影。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="hexcolor">#655</span>,<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>注意事项：</p>
<ul>
<li>投影跟边框不一样,它不会影响布局,不会受到box-sizing属性的影响。</li>
<li>不会响应鼠标事件,比如悬停或点击。</li>
</ul>
<ol>
<li>outline方案<br>如果只需两层边框,可以设置一层常规边框border,再加上outline(描边),优点在于边框样式十分灵活,(box-shadow不能产生虚线边框效果)。<br>上例box-shadow效果可以用下例代码实现：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">outline</span>:<span class="value"> <span class="number">5px</span> solid deeppink</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以通过outline-offset属性来控制跟元素边缘的间距,接受负值。</p>
<p>注意事项：</p>
<ul>
<li>只适用于双层“边框”的场景。</li>
<li>不一定会贴合border-radius属性产生的圆角,如果元素是圆角,描边可能是直角。</li>
<li>根据规范“描边可以不是矩形”,但如果使用这个方法,<code>最好在不同浏览器中完整地测试最终效果</code>。</li>
</ul>
<h5 id="灵活的背景定位"><a href="http://play.csssecrets.io/extended-bg-position" target="_blank" rel="external">灵活的背景定位</a></h5><p>当容器尺寸固定,可以通过background-position来定位。但要是容器尺寸不固定,CSS2.1就没办法了,借助现代的CSS特性,有更好的解决方案。</p>
<ol>
<li><a href="http://play.csssecrets.io/background-origin" target="_blank" rel="external">background-origin方案</a><br>background-position：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(code-pirate.svg) no-repeat <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> right <span class="number">10px</span> bottom <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>默认情况下,background-position是以padding box为准的,这样边框才不会遮住背景图片。因此,top left默认是padding box的左上角开始的。</p>
<p>css3中有个新属性background-origin,默认情况下,它的值是padding-box,可以指定为context-box,以内容区域作为基准,此时背景图片的偏移量就跟内边距一致了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(<span class="string">"code-pirate.svg"</span>) no-repeat <span class="hexcolor">#58a</span></span><br><span class="line">            bottom right</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-origin</span>:<span class="value"> content-box</span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/background-position-calc" target="_blank" rel="external">calc函数方案</a><br>直接在background-position属性中使用：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(<span class="string">"code-pirate.svg"</span>) no-repeat</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> <span class="function">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="function">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>注意：<br>不要忘记在calc()函数内的- 和 + 两侧各加一个空白符,否则会解析出错!</p>
<h5 id="边框内圆角"><a href="http://play.csssecrets.io/inner-rounding" target="_blank" rel="external">边框内圆角</a></h5><p>现在用两个元素就可以实现这个效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.something-meaningful</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.something-meaningful</span> &gt; <span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> tan</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以用一个元素实现,有点hack,不推荐<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> tan</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">8em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">6em</span> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">outline</span>:<span class="value"> .<span class="number">6em</span> solid <span class="hexcolor">#655</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="条纹背景"><a href="http://play.csssecrets.io/horizontal-stripes" target="_blank" rel="external">条纹背景</a></h5><p>利用渐变创建条纹背景:拉近两个色标,渐变区域就会变窄,50%两个色标重合。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">50%</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>改变背景尺寸,默认重复平铺。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">50%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>避免每次改动条纹宽度都要修改两个数字,把第二个色标位置设置为0,那它的位置就总是前一个色标的位置值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>创建超过两种颜色的条纹。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#fb3</span> <span class="number">33.3%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>, <span class="hexcolor">#58a</span> <span class="number">66.6%</span>, yellowgreen <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">45px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p><a href="http://play.csssecrets.io/vertical-stripes" target="_blank" rel="external">垂直条纹</a><br>只需要在开头加上一个额外的参数来指定渐变方向</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(to right,<span class="comment">/*或 90deg*/</span> <span class="hexcolor">#fb3</span> <span class="number">50%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">100%</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://play.csssecrets.io/diagonal-stripes" target="_blank" rel="external">斜向条纹</a><br>代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span> <span class="number">25%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>,<span class="hexcolor">#58a</span> <span class="number">50%</span>, <span class="hexcolor">#fb3</span> <span class="number">0</span>, <span class="hexcolor">#fb3</span> <span class="number">75%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>发现宽度实际变小了,是因为条纹的宽度实际上是三角形的高。通过公式勾股定理, 2*15根号2 约等于42.426406817<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span> <span class="number">25%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>,<span class="hexcolor">#58a</span> <span class="number">50%</span>, <span class="hexcolor">#fb3</span> <span class="number">0</span>, <span class="hexcolor">#fb3</span> <span class="number">75%</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/diagonal-stripes-60deg" target="_blank" rel="external">更好的斜向条纹</a><br>利用repeating-linear-gradient 和 repeating-radial-gradient 色标无线循环重复。<br>重复渐变：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span>, <span class="hexcolor">#58a</span> <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>创建上例条纹样式：在渐变的色标中指定长度,而不是原来的background-size,可以指定任意角度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#fb3</span>,<span class="hexcolor">#fb3</span> <span class="number">15px</span>, <span class="hexcolor">#58a</span> <span class="number">0</span>, <span class="hexcolor">#58a</span> <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="number">42px</span> <span class="number">42px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/subtle-stripes" target="_blank" rel="external">灵活的同色系条纹</a><br>把最深的颜色指定为背景色,同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">repeating-linear-gradient</span>(<span class="number">30deg</span>, </span><br><span class="line">              <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>), <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">1</span>) <span class="number">15px</span>,</span><br><span class="line">              transparent <span class="number">0</span>, transparent <span class="number">30px</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vh</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="复杂的背景图案">复杂的背景图案</h5><p>用CSS渐变来创建人和种类的几何图案</p>
<ol>
<li><a href="http://play.csssecrets.io/blueprint" target="_blank" rel="external">网格</a><br>把多个渐变图案组合起来<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">90deg</span>,<span class="function">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="function">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>希望网格中每个格子的大小可以调整,而网格线条的粗细同时保持固定。使用长度而不是百分比作为色标的场景:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(white <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">1px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30s</span>px</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><a href="http://lea.verou.me/css3patterns/" target="_blank" rel="external">CSS3图案库</a></p>
<p>可以把不同线宽,不同颜色的网格图案叠加起来,得到一个逼真的蓝图网格：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">2px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>) <span class="number">1px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">50px</span> <span class="number">50px</span>, <span class="number">50px</span> <span class="number">50px</span>,</span><br><span class="line">                 <span class="number">10px</span> <span class="number">10px</span>, <span class="number">10px</span> <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><a href="http://play.csssecrets.io/polka" target="_blank" rel="external">波点</a></li>
</ol>
<p>径向渐变创建圆点的阵列：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>波点图案：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#655</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>棋盘<br>用两个直角三角形来拼合出方块。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">30%</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>把色标的位置从50%改为25%,再把色标顺序反转,就可以创建相反方向的三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="hexcolor">#bbb</span> <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, transparent <span class="number">0</span>),</span><br><span class="line">                  <span class="function">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">75%</span>, <span class="hexcolor">#bbb</span> <span class="number">0</span>)</span></span>; 色标翻转</span><br><span class="line"><span class="rule"><span class="attribute">background-position</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span></span></span>; 第二层渐变在水平和垂直方向均移动贴片长度的一半</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>未来在CSS第四版中,可以生成角向渐变,创建棋盘很简单：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"><span class="function">repeating-conic-gradient</span>(<span class="hexcolor">#bbb</span> <span class="number">0</span>, <span class="hexcolor">#bbb</span> <span class="number">25%</span>, <span class="hexcolor">#eee</span> <span class="number">0</span>, <span class="hexcolor">#eee</span> <span class="number">50%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>也可用SVG来生成<a href="http://play.csssecrets.io/checkerboard-svg" target="_blank" rel="external">棋盘</a>,可以把SVG文件以data URI方式内嵌到样式表中：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#eee</span> <span class="function">url</span>(<span class="string">'data:image/svg+xml,\</span><br><span class="line">  &lt;svg xmlns="http://www.w3.org/2000/svg" \</span><br><span class="line">    width="100" height="100" \</span><br><span class="line">    fill-opacity=".25"&gt;\</span><br><span class="line">    &lt;rect x="50" width="50" height="50"&gt; \</span><br><span class="line">    &lt;rect y="50" width="50" height="50"&gt; \</span><br><span class="line">    &lt;/svg&gt;'</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">30px</span> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<h5 id="伪随机背景"><a href="http://play.csssecrets.io/cicada-stripes" target="_blank" rel="external">伪随机背景</a></h5><p> 自然界中的事物都不是以无限平铺的方式存在的。</p>
<p>解决方案：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> </span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#fb3</span> <span class="number">11px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#ab4</span> <span class="number">20px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#655</span> <span class="number">20px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">80px</span> <span class="number">100%</span>, <span class="number">60px</span> <span class="number">100%</span>, <span class="number">40px</span> <span class="number">100%</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>看起来更随机性,<code>各层背景图像以不同间距重复数次后再次统一对齐</code>,<code>这里贴片的尺寸实际上就是所有background-size的最小公倍数</code>,40、60、80的最小公倍数是240<br>让这种随机性更加真实,<code>把贴片的尺寸最大化</code>,<code>为了让最小公倍数最大化,这些数字最好是“相对质数”</code>。选择质数,质数跟其他任意数字都是相对质数。我们的代码改为：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> </span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#fb3</span> <span class="number">11px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#ab4</span> <span class="number">23px</span>, transparent <span class="number">0</span>),</span><br><span class="line">	<span class="function">linear-gradient</span>(<span class="number">90deg</span>, <span class="hexcolor">#655</span> <span class="number">41px</span>, transparent <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">41px</span> <span class="number">100%</span>, <span class="number">61px</span> <span class="number">100%</span>, <span class="number">83px</span> <span class="number">100%</span></span></span>;</span><br></pre></td></tr></table></figure>
<p><a href="http://play.csssecrets.io/cicanimation" target="_blank" rel="external">伪随机动画</a></p>
<h5 id="连续的图像边框">连续的图像边框</h5><p> 把图案或图片应用为边框,而不是背景。<br>border-image<a href="http://play.csssecrets.io/border-image" target="_blank" rel="external">工作原理</a></p>
<p>最简单的办法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="something-meaningful"&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    I have a nice stone art border,don't I look pretty?</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.something-meaningful &#123;</span><br><span class="line">  background: url(stone-art.jpg);</span><br><span class="line">  backfround-size: cover;</span><br><span class="line">  padding: 1em;</span><br><span class="line">&#125;</span><br><span class="line">.something-meaningful &gt; div &#123;</span><br><span class="line">  background: white;</span><br><span class="line">  padding: 1em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下例用<a href="http://play.csssecrets.io/continuous-image-borders" target="_blank" rel="external">一个元素实现</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">padding: 1em;</span><br><span class="line">border: 1em solid transparent;</span><br><span class="line">background: linear-gradient(white,white),url(stone-art.jpg); //在石雕背景图片上,叠加一层纯白的实色背景</span><br><span class="line">background-size: cover;</span><br><span class="line">background-clip: padding-box, border-box; 给两层背景指定不同的background-clip值</span><br><span class="line">background-origin: border-box; //默认为padding box 设置以平铺的方式蔓延到border box区域</span><br></pre></td></tr></table></figure></p>
<p>渐变图案生成<a href="http://play.csssecrets.io/vintage-envelope" target="_blank" rel="external">老式信封样式的边框</a></p>
<p>类ps中的选区<a href="http://play.csssecrets.io/marching=ants" target="_blank" rel="external">蚂蚁行军边框</a></p>
<p>border-image创建<a href="http://play.csssecrets.io/footnote" target="_blank" rel="external">脚注效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要介绍了各种背景和边框的样式。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web标准：是敌还是友(一)]]></title>
    <link href="/2016/06/07/cssCodingSkills/"/>
    <id>/2016/06/07/cssCodingSkills/</id>
    <published>2016-06-07T13:10:47.000Z</published>
    <updated>2016-06-11T13:32:31.158Z</updated>
    <content type="html"><![CDATA[<h4 id="Web标准：是敌还是友">Web标准：是敌还是友</h4><h6 id="标准的制定过程">标准的制定过程</h6><p> W3C并不“生成”标准,这些技术规范(基本上)并不是由W3C的工作人员编写完成的。</p>
<p>css规范由css工作组成员编写。人员组成：</p>
<ul>
<li>86名来自W3C会员公司的成员</li>
<li>7名特邀专家</li>
<li>5名W3C工作人员</li>
</ul>
<p>他们每年的会费也是W3C主要资金来源,使得W3C能够免费、开放。对于哪些东西该进入标准,浏览器厂商比W3C有更多的发言权。</p>
<p>制定标准并不是闭门造车,工作组每周召开一次电话会议,每季度面对面会议,会议记录透明。</p>
<p>每项规范从最初启动到最终成熟,都会经过以下阶段。</p>
<ol>
<li>编辑草案(ED)</li>
<li>首个公开工作草案(FPWD)</li>
<li>工作草案(WD)</li>
<li>候选推荐规范(CR)</li>
<li>提名推荐规范(PR)</li>
<li>正式推荐规范(REC)</li>
</ol>
<h6 id="CSS3、CSS4以及其他传说">CSS3、CSS4以及其他传说</h6><p> 一项规范如果要推进到最终阶段,其中的每项特性必须具备两个独立的实现和全面的测试。因CSS2变得非常庞大,将CSS打散到多个不同的规范(模块)中，<br>尽管“CSS3”这个名词非常流行,但它实际上并没有在任何规范中定义过。</p>
<h6 id="浏览器前缀">浏览器前缀</h6><p> 当新的规范出来,工作组需要网页开发者在生产环境中使用规范,以确保各项规范处理真实的开发需求。开发者都不愿尝试,所以每个浏览器厂商要加上自己的特有前缀,开发者可以自由尝试。<br>新的问题,代码冗余,有的厂商没有出现该属性的前缀。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-ms-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-o-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>-ms-border-radius 和 -o-border-radius 没有出现在任何浏览器中。</p>
<p>自动化的一些工具：</p>
<ul>
<li>初期的一些网站工具,<a href="http://css3please.com" target="_blank" rel="external">CSS3,Please!</a>等,把无前缀的代码粘贴进去，会自动把其他前缀都加好。很快就过气了。</li>
<li><a href="https://github.com/ai/autoprefixer" target="_blank" rel="external">Autoprefixer</a> 采用<a href="http://caniuse.com" target="_blank" rel="external">Can I Use</a>的数据库来判断哪些前缀是需求添加的。</li>
<li>-prefix-free 会在浏览器中进行特性检测,来决定哪些前缀是需要添加的。</li>
<li>类似 Stylue、LESS、Sass 的常用属性加前缀的mixin。</li>
</ul>
<p><code>浏览器前缀已是一场史诗般的失败</code></p>
<h4 id="CSS编码技巧">CSS编码技巧</h4><h6 id="尽量减少代码重复">尽量减少代码重复</h6><p> <code>尽量减少改动时要编辑的地方</code><br>例子：这是一个按钮<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">6px</span> <span class="number">16px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#446d88</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span> <span class="function">linear-gradient</span>(<span class="hexcolor">#77a0bb</span>,<span class="hexcolor">#58a</span>)</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> gray</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">text-shadow</span>:<span class="value"> <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="hexcolor">#335166</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">30px</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>上例代码是糟糕的,当字体改动时,行高也要更改 <code>当某些值相互依赖时,应该把它们的相互关系用代码表达出来</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">3em</span> .<span class="number">8em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span> <span class="function">linear-gradient</span>(<span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">2</span>),transparent)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">2em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> .<span class="number">05em</span> .<span class="number">25em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">text-shadow</span>:<span class="value"> <span class="number">0</span> -.<span class="number">05em</span> .<span class="number">05em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">125%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5</span></span></span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>代码易维护 vs 代码量少<br><code>代码易维护和代码量少不可兼得</code><br>例子：加一道10px边框, 但左侧不加边框。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>日后改动边框要改3个地方,拆成两条声明,可读性会好一些。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-left-width</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>currentColor<br>currentColor是 color 属性的值，具体意思是指：currentColor关键字的使用值是 color 属性值的计算值。<code>CSS中有史以来的第一个变量</code>,<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述代码div 会有一个红色的边框,比如 border-color、outline-color、以及text-shadow和box-shadow属性的默认颜色值是color属性的值。</p>
<ol>
<li>继承<br>inherit可以用在任何CSS属性中,而且它总是绑定到父元素的计算值(对伪元素来说,则会取生成该伪元素的宿主元素)。<br>例：把表单元素的字体设计为与页面的其他部分相同或要把超链接的颜色设定为与页面中其他文本相同。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">input</span>,<span class="tag">select</span>,<span class="tag">button</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font</span>:<span class="value"> inherit</span></span>; &#125;</span>  </span><br><span class="line"><span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> inherit</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="相信你的眼睛,而不是数字">相信你的眼睛,而不是数字</h6><p> 举个例子,同等宽高的正方形和圆形。视觉上的感知会认为圆形更小一些。还有给文本容器设置内边距,视觉上左右/上下内边距是不等的,原因在于,<code>字母的形状在两端都比较整齐,而顶部和底部则往往参差不齐。</code>这就需要减少顶部和底部的内边距。</p>
<h6 id="响应式网页设计">响应式网页设计</h6><p> 常见的是用多分辨率来测试一个网站,添加多个媒体查询(Media Query)规则来解决,但是对于以后的CSS改动来说,<code>每个媒体查询都会增加成本</code>。每次的CSS代码修改都要查看媒体查询是否需要修改和设置。<br>不是说媒体查询是一种不良实践,<code>只要用对了,它就是利器</code>。在何时使用：</p>
<ul>
<li>比如你想把网站做得弹性灵活,其他尝试都失败了。</li>
<li><p>或在较大或较小的视口下完全改变网站的设计形态(譬如,把侧栏改成水平布局)。</p>
<p>避免不必要的媒体查询,建议:</p>
</li>
<li>使用百分比取代固定长度,尝试使用与视口相关的单位(vw、vh、vmin和vmax),它们的值解析为视口宽度或高度的百分比。</li>
<li>当你需要在较大分辨率下得到固定宽度时,使用max-width而不是width,因为它可以适应较小的分辨率,而无需使用媒体查询。</li>
<li>为替换元素(img、object、video、iframe等)设置一个max-width,值为100%。</li>
<li>把背景图片完整铺满一个容器,可以使用background-size: cover 属性做到,由于带宽限制,在移动网页中把大图缩小显示不太明智。</li>
<li>当图片(或其他元素)以列式进行布局时,让视口的宽度来决定列的数量。弹性盒模型(flexbox)或者display:inline-block加上常规的文本折行,都可实现这一点。</li>
<li>使用多列文本时,指定column-width(列宽)而不是指定column-count(列数),这样它就可以在较小的屏幕上自动显示为单列布局。</li>
</ul>
<p>总的思路来说,<code>尽最大努力实现弹性可伸缩的布局,并在媒体查询的各个断点区间内指定相应尺寸</code>。当网页设计足够灵活,响应式只需用到简短的媒体查询代码。</p>
<h6 id="合理使用简写">合理使用简写</h6><p> 下两行代码并不是等价的：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> rebeccapurple</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-color</span>:<span class="value"> rebeccapurple</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>前者为纯色背景,后者背景最终会显示一个粉色渐变图案、一张图片或其他任何东西,因为可能会有一条background-image声明在起作用。<br><code>合理使用简写是一种良好的防卫性编码方式,可以抵御未来的风险</code>。如果要明确地去覆盖某个具体的展开式属性,就需要我们用展开式属性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(tr.png) no-repeat top right / <span class="number">2em</span> <span class="number">2em</span>,</span><br><span class="line">background: <span class="function">url</span>(br.png) no-repeat bottom right / <span class="number">2em</span> <span class="number">2em</span>,</span><br><span class="line">background: <span class="function">url</span>(bl.png) no-repeat bottom left / <span class="number">2em</span> <span class="number">2em</span></span></span></span><br></pre></td></tr></table></figure>
<p>把重复的值从简写属性中抽出来写成一个展开式属性:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(tr.png) top right,</span><br><span class="line">background: <span class="function">url</span>(br.png) bottom right,</span><br><span class="line">background: <span class="function">url</span>(bl.png) bottom left</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">2em</span> <span class="number">2em</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">background-repeat</span>:<span class="value"> no-repeat</span></span>;</span><br></pre></td></tr></table></figure></p>
<h6 id="应该使用预处理器吗">应该使用预处理器吗</h6><p> <code>如果使用得当,它们在大型项目中可以让代码更加灵活</code><br>预处理器的缺点：</p>
<ul>
<li>文件体积和复杂度可能会失控。</li>
<li>调试难度会增加,现在很多工具支持SourceMap,正是为了解决这个痛点而生的。</li>
<li>延时,需要差不多1秒的时间来把源代码编译成CSS。</li>
<li>当新成员加入时,<code>要么强制协作者接受我们的选择,要么花费额外的时间来培训</code>。</li>
<li><code>预处理器也有自己的BUG</code>,我们会很少怀疑预处理的某个BUG。</li>
</ul>
<p><code>很多受预处理器启发的特性都已经以各种方式融入到原生CSS中了</code>。</p>
<ul>
<li>一份关于自定义的属性草案,<code>CSS自定义属性层叠式变量</code>(<a href="http://w3.org/TR/css-variables-1" target="_blank" rel="external">http://w3.org/TR/css-variables-1</a>).</li>
<li>CSS中的calc()函数。</li>
<li>CSS颜色(第四版)的 color()函数。</li>
<li>还有CSS工作组正式讨论的嵌套。</li>
</ul>
<p>原生特性通常<code>比预处理器提供的版本要强大的多</code>,预处理器不知道如何处理100%-50px,原生可以。<code>在使用预处理器的问题上需要冷静决策</code>,不应该在每个项目一开始时就使用预处理器。</p>
<p><a href="http://myth.io" target="_blank" rel="external">Myth</a>是一款实验性质的预处理器,它模拟原生的CSS新特性,而不是引入私有语法。本质上扮演了CSSpolyfill的角色。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要介绍了css相关web标准和编写技巧。]]>
    
    </summary>
    
      <category term="css secrets" scheme="/tags/css-secrets/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WebGl：3D应用开发 (九)]]></title>
    <link href="/2016/06/01/webGlDevelopment/"/>
    <id>/2016/06/01/webGlDevelopment/</id>
    <published>2016-06-01T14:07:42.000Z</published>
    <updated>2016-06-02T13:05:45.209Z</updated>
    <content type="html"><![CDATA[<h4 id="主要内容">主要内容</h4><ul>
<li>开发WebGl引擎</li>
<li>与显卡通讯</li>
<li>创建3D图形</li>
</ul>
<p>快速开发出来一个WebGl应用,下载CopperLicht,<a href="http://www.ambiera.com/copperlicht/download.html" target="_blank" rel="external">下载页面</a>。<br>其他一些项目(交互式数据展示、建筑展示、动画视频和地图等),可以使用 <code>Threejs</code> </p>
<p>本文要创建的3D <a href="https://shizhidi.github.io/assets/examples/html5-ia/ch9/geometry_destroyer/index.html" target="_blank" rel="external">Geometry Destroyer</a>游戏应用。</p>
<h5 id="创建一个WebGl游戏引擎">创建一个WebGl游戏引擎</h5><p>在旧版IE中使用WebGL,使用<a href="http://iewebgl.com" target="_blank" rel="external">IEWebGL插件</a>。IE6到10,都支持。注意它并不适合本文范例,和Three.js库能很好的结合。</p>
<p>关于显卡的警告：并不是所用显卡都能支持WebGL,如果用的浏览器时Chrome或Firefox的最新版,却无法运行本文应用。可以换台电脑试一下。</p>
<p>不能在WebGL应用中使用2D Canvas,二者不能出现在同一绘图环境中。不过,可以使用两个&lt;canvas&gt;元素来创建两个不同的绘图环境,然后通过css,让其中一个位于另一个上方。</p>
<p>assets目录中的4个外部文件：</p>
<ul>
<li>Paul Irish 位于animation.js 中的 requestAnimationFrame()。</li>
<li>John Resig的类扩展脚本classes.js的一种轻微修改版本。</li>
<li>变换矩阵库sylvester.js。</li>
<li>webgl_util.js的辅助函数。</li>
</ul>
<p>利用最好的动画实践来配置引擎：</p>
<ul>
<li>利用requestAnimationFrame()取代setInterval,来解决移动兼容性,防止在另一个标签页中更新,防止帧速率波动。</li>
<li>在其他浏览器中测试requestAnimationFrame(),利用Paul Irish 提供的polyfill,为像IE8这样的老式浏览器提供支持。</li>
</ul>
<p>engine目录中的文件：</p>
<ul>
<li>core.js这些代码能够判断浏览器是否支持WebGL,对WebGL进行基本配置,创建一个侦测碰撞的辅助方法,并且为后面的代码预先留出位置。</li>
<li>game.js含有几个常用方法,可缩减run.js文件尺寸,并使其易于维护。</li>
</ul>
<h4 id="与显卡通信">与显卡通信</h4><p> 有关显卡的一些基本知识：用户浏览器时如何处理并显示游戏对象的3D数据：<br>当把实体的3D数据发送到显卡时,这些数据起初是以数组形式(计算机数据)存在的,随后就会被GPU(图形处理单元)转换成顶点缓冲区。在这一渲染阶段,<br>需要更多的信息来装配3D形状(比如说缓冲区变量)。在处理完定点缓冲区后,这些数据就会通过顶点着色器的处理,生成屏幕位置和颜色信息。然后,GPU通过<br>三角形转配器将3D数据进一步处理成三角形片段,然后再将其送入光栅化程序,清楚掉形状当中不必要的视觉数据,生成像素片段,平滑彩色表面。随后,片段着色器<br>会继续处理形状数据,为每一像素输出色彩值及深度值。最后,通过缓存器将3D数据显示到用户屏幕上。</p>
<p>三角面很容易拼合成人脸或者球体这种复杂的三维形体。</p>
]]></content>
    <summary type="html">
    <![CDATA[本文主要讲解 webGl的 3D应用开发]]>
    
    </summary>
    
      <category term="html5" scheme="/tags/html5/"/>
    
      <category term="web" scheme="/categories/web/"/>
    
  </entry>
  
</feed>